{
  "name": "washing-machine",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "washing-machine.tsx",
      "content": "'use client';\n\nimport { motion, useAnimation } from 'motion/react';\nimport type { HTMLAttributes } from 'react';\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface WashingMachineIconHandle {\n  startAnimation: () => void;\n  stopAnimation: () => void;\n}\n\ninterface WashingMachineIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number;\n}\n\nconst WashingMachineIcon = forwardRef<\n  WashingMachineIconHandle,\n  WashingMachineIconProps\n>(({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n  const controls = useAnimation();\n  const isControlledRef = useRef(false);\n\n  useImperativeHandle(ref, () => {\n    isControlledRef.current = true;\n    return {\n      startAnimation: () => controls.start('animate'),\n      stopAnimation: () => controls.start('normal'),\n    };\n  });\n\n  const handleMouseEnter = useCallback(\n    (e: React.MouseEvent<HTMLDivElement>) => {\n      if (!isControlledRef.current) {\n        controls.start('animate');\n      } else {\n        onMouseEnter?.(e);\n      }\n    },\n    [controls, onMouseEnter]\n  );\n\n  const handleMouseLeave = useCallback(\n    (e: React.MouseEvent<HTMLDivElement>) => {\n      if (!isControlledRef.current) {\n        controls.start('normal');\n      } else {\n        onMouseLeave?.(e);\n      }\n    },\n    [controls, onMouseLeave]\n  );\n\n  return (\n    <div\n      className={cn(className)}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      {...props}\n    >\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width={size}\n        height={size}\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeWidth=\"2\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      >\n        <motion.g\n          animate={controls}\n          variants={{\n            normal: {\n              x: 0,\n            },\n            animate: {\n              x: [0, 0.5, -0.5, 0.3, -0.3, 0],\n              transition: {\n                duration: 0.8,\n                repeat: Infinity,\n                ease: 'easeInOut',\n              },\n            },\n          }}\n        >\n          <path d=\"M3 6h3\" />\n          <path d=\"M17 6h.01\" />\n          <rect width=\"18\" height=\"20\" x=\"3\" y=\"2\" rx=\"2\" />\n        </motion.g>\n        <motion.g\n          animate={controls}\n          variants={{\n            normal: {\n              rotate: 0,\n              y: 0,\n              transition: {\n                duration: 0.5,\n                ease: 'linear',\n              },\n            },\n            animate: {\n              rotate: 360,\n              y: [0, -0.3, 0, 0.3, 0],\n              transition: {\n                rotate: {\n                  duration: 1,\n                  repeat: Infinity,\n                  ease: 'linear',\n                },\n                y: {\n                  duration: 0.3,\n                  repeat: Infinity,\n                  ease: 'easeInOut',\n                },\n              },\n            },\n          }}\n        >\n          <circle cx=\"12\" cy=\"13\" r=\"5\" />\n          <path d=\"M12 18a2.5 2.5 0 0 0 0-5 2.5 2.5 0 0 1 0-5\" />\n        </motion.g>\n      </svg>\n    </div>\n  );\n});\n\nWashingMachineIcon.displayName = 'WashingMachineIcon';\n\nexport { WashingMachineIcon };\n",
      "type": "registry:ui"
    }
  ]
}