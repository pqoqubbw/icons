{
  "name": "keyboard",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "keyboard.tsx",
      "content": "'use client';\r\n\r\nimport { AnimatePresence, motion, useAnimation } from 'motion/react';\r\nimport { useEffect, useState } from 'react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface KeyboardIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface KeyboardIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst KEYBOARD_PATHS = [\r\n  { id: 'key1', d: 'M10 8h.01' },\r\n  { id: 'key2', d: 'M12 12h.01' },\r\n  { id: 'key3', d: 'M14 8h.01' },\r\n  { id: 'key4', d: 'M16 12h.01' },\r\n  { id: 'key5', d: 'M18 8h.01' },\r\n  { id: 'key6', d: 'M6 8h.01' },\r\n  { id: 'key7', d: 'M7 16h10' },\r\n  { id: 'key8', d: 'M8 12h.01' },\r\n];\r\n\r\nconst KeyboardIcon = forwardRef<KeyboardIconHandle, KeyboardIconProps>(\r\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n    const [isHovered, setIsHovered] = useState(false);\r\n    const controls = useAnimation();\r\n\r\n    const isControlledRef = useRef(false);\r\n\r\n    useImperativeHandle(ref, () => {\r\n      isControlledRef.current = true;\r\n\r\n      return {\r\n        startAnimation: () => setIsHovered(true),\r\n        stopAnimation: () => setIsHovered(false),\r\n      };\r\n    });\r\n\r\n    const handleMouseEnter = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          setIsHovered(true);\r\n        } else {\r\n          onMouseEnter?.(e);\r\n        }\r\n      },\r\n      [onMouseEnter]\r\n    );\r\n\r\n    const handleMouseLeave = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          setIsHovered(false);\r\n        } else {\r\n          onMouseLeave?.(e);\r\n        }\r\n      },\r\n      [onMouseLeave]\r\n    );\r\n\r\n    useEffect(() => {\r\n      const animateKeys = async () => {\r\n        if (isHovered) {\r\n          await controls.start((i) => ({\r\n            opacity: [1, 0.2, 1],\r\n            transition: {\r\n              duration: 1.5,\r\n              times: [0, 0.5, 1],\r\n              delay: i * 0.2 * Math.random(),\r\n              repeat: 1,\r\n              repeatType: 'reverse',\r\n            },\r\n          }));\r\n        } else {\r\n          controls.stop();\r\n          controls.set({ opacity: 1 });\r\n        }\r\n      };\r\n\r\n      animateKeys();\r\n    }, [isHovered, controls]);\r\n\r\n    return (\r\n      <div\r\n        className={cn(className)}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        {...props}\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={size}\r\n          height={size}\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n        >\r\n          <rect width=\"20\" height=\"16\" x=\"2\" y=\"4\" rx=\"2\" />\r\n          <AnimatePresence>\r\n            {KEYBOARD_PATHS.map((path, index) => (\r\n              <motion.path\r\n                key={path.id}\r\n                d={path.d}\r\n                initial={{ opacity: 1 }}\r\n                animate={controls}\r\n                custom={index}\r\n              />\r\n            ))}\r\n          </AnimatePresence>\r\n        </svg>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nKeyboardIcon.displayName = 'KeyboardIcon';\r\n\r\nexport { KeyboardIcon };\r\n",
      "type": "registry:ui"
    }
  ]
}