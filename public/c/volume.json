{
  "name": "volume",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "volume.tsx",
      "content": "'use client';\r\n\r\nimport { AnimatePresence, motion } from 'motion/react';\r\nimport { Fragment, useState } from 'react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface VolumeIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface VolumeIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst VolumeIcon = forwardRef<VolumeIconHandle, VolumeIconProps>(\r\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n    const [isHovered, setIsHovered] = useState(false);\r\n    const isControlledRef = useRef(false);\r\n\r\n    useImperativeHandle(ref, () => {\r\n      isControlledRef.current = true;\r\n\r\n      return {\r\n        startAnimation: () => setIsHovered(true),\r\n        stopAnimation: () => setIsHovered(false),\r\n      };\r\n    });\r\n\r\n    const handleMouseEnter = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          setIsHovered(true);\r\n        } else {\r\n          onMouseEnter?.(e);\r\n        }\r\n      },\r\n      [onMouseEnter]\r\n    );\r\n\r\n    const handleMouseLeave = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          setIsHovered(false);\r\n        } else {\r\n          onMouseLeave?.(e);\r\n        }\r\n      },\r\n      [onMouseLeave]\r\n    );\r\n\r\n    return (\r\n      <div\r\n        className={cn(className)}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        {...props}\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={size}\r\n          height={size}\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n        >\r\n          <path d=\"M11 4.702a.705.705 0 0 0-1.203-.498L6.413 7.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298z\" />\r\n          <AnimatePresence mode=\"wait\" initial={false}>\r\n            {isHovered ? (\r\n              <Fragment key=\"volume-icon-active\">\r\n                <motion.path\r\n                  d=\"M16 9a5 5 0 0 1 0 6\"\r\n                  animate={{ opacity: 1, transition: { delay: 0.1 } }}\r\n                  initial={{ opacity: 0 }}\r\n                  exit={{ opacity: 0 }}\r\n                />\r\n                <motion.path\r\n                  d=\"M19.364 18.364a9 9 0 0 0 0-12.728\"\r\n                  animate={{ opacity: 1, transition: { delay: 0.2 } }}\r\n                  initial={{ opacity: 0 }}\r\n                  exit={{ opacity: 0 }}\r\n                />\r\n              </Fragment>\r\n            ) : (\r\n              <Fragment key=\"volume-icon-inactive\">\r\n                <motion.line\r\n                  x1=\"22\"\r\n                  x2=\"16\"\r\n                  y1=\"9\"\r\n                  y2=\"15\"\r\n                  animate={{\r\n                    pathLength: [0, 1],\r\n                    opacity: [0, 1],\r\n                    transition: { delay: 0.1 },\r\n                  }}\r\n                  initial={{ pathLength: 1, opacity: 1 }}\r\n                  exit={{ pathLength: 1, opacity: 1 }}\r\n                />\r\n                <motion.line\r\n                  x1=\"16\"\r\n                  x2=\"22\"\r\n                  y1=\"9\"\r\n                  y2=\"15\"\r\n                  animate={{\r\n                    pathLength: [0, 1],\r\n                    opacity: [0, 1],\r\n                    transition: { delay: 0.2 },\r\n                  }}\r\n                  initial={{ pathLength: 1, opacity: 1 }}\r\n                  exit={{ pathLength: 1, opacity: 1 }}\r\n                />\r\n              </Fragment>\r\n            )}\r\n          </AnimatePresence>\r\n        </svg>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nVolumeIcon.displayName = 'VolumeIcon';\r\n\r\nexport { VolumeIcon };\r\n",
      "type": "registry:ui"
    }
  ]
}