{
  "name": "bot-message-square",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "bot-message-square.tsx",
      "content": "'use client';\n\nimport { motion, useAnimation } from 'motion/react';\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\nimport type { HTMLAttributes } from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface BotMessageSquareHandle {\n  startAnimation: () => void;\n  stopAnimation: () => void;\n}\n\ninterface BotMessageSquareProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number;\n}\n\nexport const BotMessageSquareIcon = forwardRef<\n  BotMessageSquareHandle,\n  BotMessageSquareProps\n>(({ className, onMouseEnter, onMouseLeave, size = 28, ...props }, ref) => {\n  const controls = useAnimation();\n  const isControlledRef = useRef(false);\n\n  useImperativeHandle(ref, () => {\n    isControlledRef.current = true;\n    return {\n      startAnimation: () => controls.start('animate'),\n      stopAnimation: () => controls.start('normal'),\n    };\n  });\n\n  const handleMouseEnter = useCallback(\n    (e: React.MouseEvent<HTMLDivElement>) => {\n      if (!isControlledRef.current) controls.start('animate');\n      else onMouseEnter?.(e);\n    },\n    [controls, onMouseEnter]\n  );\n\n  const handleMouseLeave = useCallback(\n    (e: React.MouseEvent<HTMLDivElement>) => {\n      if (!isControlledRef.current) controls.start('normal');\n      else onMouseLeave?.(e);\n    },\n    [controls, onMouseLeave]\n  );\n\n  return (\n    <div\n      className={cn('inline-flex items-center justify-center', className)}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      {...props}\n    >\n      <motion.svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width={size}\n        height={size}\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeWidth=\"2\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        initial=\"normal\"\n        animate={controls}\n        variants={{\n          normal: { rotate: 0, y: 0, scale: 1 },\n          animate: {\n            rotate: [0, -3, 3, 0, 0],\n            y: [0, 1.5, -1.5, 0],\n            scale: [1, 1.03, 1],\n            transition: {\n              duration: 1,\n              ease: 'easeInOut',\n              repeat: 0,\n            },\n          },\n        }}\n      >\n        {/* antenna */}\n        <path d=\"M12 6V2H8\" />\n\n        {/* side connectors */}\n        <path d=\"M2 12h2\" />\n        <path d=\"M20 12h2\" />\n\n        {/* message bubble pulse */}\n        <motion.path\n          d=\"M20 16a2 2 0 0 1-2 2H8.828a2 2 0 0 0-1.414.586l-2.202 2.202A.71.71 0 0 1 4 20.286V8a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2z\"\n          variants={{\n            normal: { scale: 1, originX: 0.5, originY: 0.5 },\n            animate: {\n              scale: [1, 1.04, 1],\n              transition: {\n                duration: 0.6,\n                ease: 'easeInOut',\n                repeat: 1,\n              },\n            },\n          }}\n        />\n\n        {/* eyes */}\n        <motion.path\n          d=\"M9 11v2\"\n          variants={{\n            normal: { scaleY: 1, originY: 0.5 },\n            animate: {\n              scaleY: [1, 0.1, 1],\n              transition: { duration: 0.4, ease: 'easeInOut', delay: 0.1 },\n            },\n          }}\n        />\n        <motion.path\n          d=\"M15 11v2\"\n          variants={{\n            normal: { scaleY: 1, originY: 0.5 },\n            animate: {\n              scaleY: [1, 0.1, 1],\n              transition: { duration: 0.4, ease: 'easeInOut', delay: 0.2 },\n            },\n          }}\n        />\n\n        {/* typing dots (only visible when animating) */}\n        <motion.circle\n          cx=\"10\"\n          cy=\"18\"\n          r=\"0.5\"\n          variants={{\n            normal: { opacity: 0 },\n            animate: {\n              opacity: [0.3, 1, 0.3],\n              transition: { repeat: Infinity, duration: 1.2, delay: 0 },\n            },\n          }}\n        />\n        <motion.circle\n          cx=\"12\"\n          cy=\"18\"\n          r=\"0.5\"\n          variants={{\n            normal: { opacity: 0 },\n            animate: {\n              opacity: [0.3, 1, 0.3],\n              transition: { repeat: Infinity, duration: 1.2, delay: 0.3 },\n            },\n          }}\n        />\n        <motion.circle\n          cx=\"14\"\n          cy=\"18\"\n          r=\"0.5\"\n          variants={{\n            normal: { opacity: 0 },\n            animate: {\n              opacity: [0.3, 1, 0.3],\n              transition: { repeat: Infinity, duration: 1.2, delay: 0.6 },\n            },\n          }}\n        />\n      </motion.svg>\n    </div>\n  );\n});\n\nBotMessageSquareIcon.displayName = 'BotMessageSquareIcon';\n",
      "type": "registry:ui"
    }
  ]
}