{
  "name": "bot-message-square",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "bot-message-square.tsx",
      "content": "'use client';\r\n\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface BotMessageSquareHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface BotMessageSquareProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nexport const BotMessageSquareIcon = forwardRef<\r\n  BotMessageSquareHandle,\r\n  BotMessageSquareProps\r\n>(({ className, onMouseEnter, onMouseLeave, size = 28, ...props }, ref) => {\r\n  const controls = useAnimation();\r\n  const isControlledRef = useRef(false);\r\n\r\n  useImperativeHandle(ref, () => {\r\n    isControlledRef.current = true;\r\n    return {\r\n      startAnimation: () => controls.start('animate'),\r\n      stopAnimation: () => controls.start('normal'),\r\n    };\r\n  });\r\n\r\n  const handleMouseEnter = useCallback(\r\n    (e: React.MouseEvent<HTMLDivElement>) => {\r\n      if (!isControlledRef.current) controls.start('animate');\r\n      else onMouseEnter?.(e);\r\n    },\r\n    [controls, onMouseEnter]\r\n  );\r\n\r\n  const handleMouseLeave = useCallback(\r\n    (e: React.MouseEvent<HTMLDivElement>) => {\r\n      if (!isControlledRef.current) controls.start('normal');\r\n      else onMouseLeave?.(e);\r\n    },\r\n    [controls, onMouseLeave]\r\n  );\r\n\r\n  return (\r\n    <div\r\n      className={cn('inline-flex items-center justify-center', className)}\r\n      onMouseEnter={handleMouseEnter}\r\n      onMouseLeave={handleMouseLeave}\r\n      {...props}\r\n    >\r\n      <motion.svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        width={size}\r\n        height={size}\r\n        viewBox=\"0 0 24 24\"\r\n        fill=\"none\"\r\n        stroke=\"currentColor\"\r\n        strokeWidth=\"2\"\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n        initial=\"normal\"\r\n        animate={controls}\r\n        variants={{\r\n          normal: { rotate: 0, y: 0, scale: 1 },\r\n          animate: {\r\n            rotate: [0, -3, 3, 0, 0],\r\n            y: [0, 1.5, -1.5, 0],\r\n            scale: [1, 1.03, 1],\r\n            transition: {\r\n              duration: 1,\r\n              ease: 'easeInOut',\r\n              repeat: 0,\r\n            },\r\n          },\r\n        }}\r\n      >\r\n        {/* antenna */}\r\n        <path d=\"M12 6V2H8\" />\r\n\r\n        {/* side connectors */}\r\n        <path d=\"M2 12h2\" />\r\n        <path d=\"M20 12h2\" />\r\n\r\n        {/* message bubble pulse */}\r\n        <motion.path\r\n          d=\"M20 16a2 2 0 0 1-2 2H8.828a2 2 0 0 0-1.414.586l-2.202 2.202A.71.71 0 0 1 4 20.286V8a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2z\"\r\n          variants={{\r\n            normal: { scale: 1, originX: 0.5, originY: 0.5 },\r\n            animate: {\r\n              scale: [1, 1.04, 1],\r\n              transition: {\r\n                duration: 0.6,\r\n                ease: 'easeInOut',\r\n                repeat: 1,\r\n              },\r\n            },\r\n          }}\r\n        />\r\n\r\n        {/* eyes */}\r\n        <motion.path\r\n          d=\"M9 11v2\"\r\n          variants={{\r\n            normal: { scaleY: 1, originY: 0.5 },\r\n            animate: {\r\n              scaleY: [1, 0.1, 1],\r\n              transition: { duration: 0.4, ease: 'easeInOut', delay: 0.1 },\r\n            },\r\n          }}\r\n        />\r\n        <motion.path\r\n          d=\"M15 11v2\"\r\n          variants={{\r\n            normal: { scaleY: 1, originY: 0.5 },\r\n            animate: {\r\n              scaleY: [1, 0.1, 1],\r\n              transition: { duration: 0.4, ease: 'easeInOut', delay: 0.2 },\r\n            },\r\n          }}\r\n        />\r\n\r\n        {/* typing dots (only visible when animating) */}\r\n        <motion.circle\r\n          cx=\"10\"\r\n          cy=\"18\"\r\n          r=\"0.5\"\r\n          variants={{\r\n            normal: { opacity: 0 },\r\n            animate: {\r\n              opacity: [0.3, 1, 0.3],\r\n              transition: { repeat: Infinity, duration: 1.2, delay: 0 },\r\n            },\r\n          }}\r\n        />\r\n        <motion.circle\r\n          cx=\"12\"\r\n          cy=\"18\"\r\n          r=\"0.5\"\r\n          variants={{\r\n            normal: { opacity: 0 },\r\n            animate: {\r\n              opacity: [0.3, 1, 0.3],\r\n              transition: { repeat: Infinity, duration: 1.2, delay: 0.3 },\r\n            },\r\n          }}\r\n        />\r\n        <motion.circle\r\n          cx=\"14\"\r\n          cy=\"18\"\r\n          r=\"0.5\"\r\n          variants={{\r\n            normal: { opacity: 0 },\r\n            animate: {\r\n              opacity: [0.3, 1, 0.3],\r\n              transition: { repeat: Infinity, duration: 1.2, delay: 0.6 },\r\n            },\r\n          }}\r\n        />\r\n      </motion.svg>\r\n    </div>\r\n  );\r\n});\r\n\r\nBotMessageSquareIcon.displayName = 'BotMessageSquareIcon';\r\n",
      "type": "registry:ui"
    }
  ]
}