{
  "name": "smile-plus",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "smile-plus.tsx",
      "content": "'use client';\n\nimport type { Variants } from 'motion/react';\nimport { motion, useAnimation } from 'motion/react';\nimport type { HTMLAttributes } from 'react';\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface SmilePlusIconHandle {\n  startAnimation: () => void;\n  stopAnimation: () => void;\n}\n\ninterface SmilePlusIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number;\n}\n\nconst SmilePlusIcon = forwardRef<SmilePlusIconHandle, SmilePlusIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation();\n    const isControlledRef = useRef(false);\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true;\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      };\n    });\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) controls.start('animate');\n        else onMouseEnter?.(e);\n      },\n      [controls, onMouseEnter]\n    );\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) controls.start('normal');\n        else onMouseLeave?.(e);\n      },\n      [controls, onMouseLeave]\n    );\n\n    const faceVariants: Variants = {\n      normal: { scale: 1 },\n      animate: {\n        scale: 1.1,\n        transition: { type: 'spring', stiffness: 200, damping: 20 },\n      },\n    };\n\n    const plusVariants: Variants = {\n      normal: { rotate: 0, scale: 1 },\n      animate: {\n        rotate: 90,\n        scale: 1.2,\n        transition: { type: 'spring', stiffness: 200, damping: 20, delay: 0.1 },\n      },\n    };\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <motion.svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          animate={controls}\n          variants={faceVariants}\n        >\n          <path d=\"M22 11v1a10 10 0 1 1-9-10\" />\n          <path d=\"M8 14s1.5 2 4 2 4-2 4-2\" />\n          <line x1=\"9\" x2=\"9.01\" y1=\"9\" y2=\"9\" />\n          <line x1=\"15\" x2=\"15.01\" y1=\"9\" y2=\"9\" />\n          <motion.path variants={plusVariants} animate={controls} d=\"M16 5h6\" />\n          <motion.path variants={plusVariants} animate={controls} d=\"M19 2v6\" />\n        </motion.svg>\n      </div>\n    );\n  }\n);\n\nSmilePlusIcon.displayName = 'SmilePlusIcon';\n\nexport { SmilePlusIcon };\n",
      "type": "registry:ui"
    }
  ]
}