{
  "name": "scan-face",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "scan-face.tsx",
      "content": "'use client';\n\nimport type { Variants } from 'motion/react';\nimport { motion, useAnimation } from 'motion/react';\nimport type { HTMLAttributes } from 'react';\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface ScanFaceIconHandle {\n  startAnimation: () => void;\n  stopAnimation: () => void;\n}\n\ninterface ScanFaceIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number;\n}\n\nconst ScanFaceIcon = forwardRef<ScanFaceIconHandle, ScanFaceIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation();\n    const isControlledRef = useRef(false);\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true;\n      return {\n        startAnimation: async () => {\n          await controls.start('hidden');\n          await controls.start('visible');\n        },\n        stopAnimation: () => controls.start('visible'),\n      };\n    });\n\n    const handleMouseEnter = useCallback(\n      async (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          await controls.start('hidden');\n          await controls.start('visible');\n        } else {\n          onMouseEnter?.(e);\n        }\n      },\n      [controls, onMouseEnter]\n    );\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('visible');\n        } else {\n          onMouseLeave?.(e);\n        }\n      },\n      [controls, onMouseLeave]\n    );\n\n    const faceVariants: Variants = {\n      visible: { scale: 1 },\n      hidden: {\n        scale: 0.9,\n        transition: { type: 'spring', stiffness: 200, damping: 20 },\n      },\n    };\n\n    const cornerVariants: Variants = {\n      visible: { scale: 1, rotate: 0, opacity: 1 },\n      hidden: {\n        scale: 1.2,\n        rotate: 45,\n        opacity: 0,\n        transition: { type: 'spring', stiffness: 200, damping: 20 },\n      },\n    };\n\n    const mouthVariants: Variants = {\n      visible: { scale: 1, opacity: 1 },\n      hidden: {\n        scale: 0.8,\n        opacity: 0,\n        transition: { duration: 0.3, delay: 0.1 },\n      },\n    };\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <motion.svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          animate={controls}\n          variants={faceVariants}\n        >\n          <motion.path\n            variants={cornerVariants}\n            animate={controls}\n            initial=\"visible\"\n            d=\"M3 7V5a2 2 0 0 1 2-2h2\"\n          />\n          <motion.path\n            variants={cornerVariants}\n            animate={controls}\n            initial=\"visible\"\n            d=\"M17 3h2a2 2 0 0 1 2 2v2\"\n          />\n          <motion.path\n            variants={cornerVariants}\n            animate={controls}\n            initial=\"visible\"\n            d=\"M21 17v2a2 2 0 0 1-2 2h-2\"\n          />\n          <motion.path\n            variants={cornerVariants}\n            animate={controls}\n            initial=\"visible\"\n            d=\"M7 21H5a2 2 0 0 1-2-2v-2\"\n          />\n          <motion.path\n            variants={mouthVariants}\n            animate={controls}\n            initial=\"visible\"\n            d=\"M8 14s1.5 2 4 2 4-2 4-2\"\n          />\n          <line x1=\"9\" x2=\"9.01\" y1=\"9\" y2=\"9\" />\n          <line x1=\"15\" x2=\"15.01\" y1=\"9\" y2=\"9\" />\n        </motion.svg>\n      </div>\n    );\n  }\n);\n\nScanFaceIcon.displayName = 'ScanFaceIcon';\n\nexport { ScanFaceIcon };\n",
      "type": "registry:ui"
    }
  ]
}