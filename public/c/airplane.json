{
  "name": "airplane",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "airplane.tsx",
      "content": "'use client';\r\n\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface AirplaneIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface AirplaneIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst SPEED_LINES = [\r\n  { x1: 5, y1: 15, x2: 1, y2: 19, delay: 0.1 },\r\n  { x1: 7, y1: 17, x2: 3, y2: 21, delay: 0.2 },\r\n  { x1: 9, y1: 19, x2: 5, y2: 23, delay: 0.3 },\r\n];\r\n\r\nconst AirplaneIcon = forwardRef<AirplaneIconHandle, AirplaneIconProps>(\r\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n    const controls = useAnimation();\r\n    const isControlledRef = useRef(false);\r\n\r\n    useImperativeHandle(ref, () => {\r\n      isControlledRef.current = true;\r\n\r\n      return {\r\n        startAnimation: () => controls.start('animate'),\r\n        stopAnimation: () => controls.start('normal'),\r\n      };\r\n    });\r\n\r\n    const handleMouseEnter = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('animate');\r\n        } else {\r\n          onMouseEnter?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseEnter]\r\n    );\r\n\r\n    const handleMouseLeave = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('normal');\r\n        } else {\r\n          onMouseLeave?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseLeave]\r\n    );\r\n\r\n    return (\r\n      <div\r\n        className={cn(className)}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        {...props}\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={size}\r\n          height={size}\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          className=\"overflow-visible\"\r\n        >\r\n          <motion.path\r\n            animate={controls}\r\n            transition={{\r\n              duration: 0.5,\r\n            }}\r\n            variants={{\r\n              normal: { x: 0, y: 0, scale: 1 },\r\n              animate: {\r\n                x: 3,\r\n                y: -3,\r\n                scale: 0.8,\r\n              },\r\n            }}\r\n            d=\"M17.8 19.2L16 11l3.5-3.5C21 6 21.5 4 21 3c-1-.5-3 0-4.5 1.5L13 8 4.8 6.2c-.5-.1-.9.1-1.1.5l-.3.5c-.2.5-.1 1 .3 1.3L9 12l-2 3H4l-1 1 3 2 2 3 1-1v-3l3-2 3.5 5.3c.3.4.8.5 1.3.3l.5-.2c.4-.3.6-.7.5-1.2z\"\r\n          />\r\n          {SPEED_LINES.map((line, index) => (\r\n            <motion.line\r\n              key={index}\r\n              x1={line.x1}\r\n              y1={line.y1}\r\n              x2={line.x2}\r\n              y2={line.y2}\r\n              stroke=\"currentColor\"\r\n              strokeWidth=\"1\"\r\n              initial={{ opacity: 0, pathLength: 1, pathSpacing: 1 }}\r\n              variants={{\r\n                normal: {\r\n                  pathOffset: [0, 1],\r\n                  translateX: -3,\r\n                  translateY: 3,\r\n                  opacity: 0,\r\n                  transition: {\r\n                    duration: 0.3,\r\n                    times: [0, 0.6, 1],\r\n                  },\r\n                },\r\n                animate: {\r\n                  pathOffset: [1, 2],\r\n                  translateX: [0, 0],\r\n                  translateY: [0, 0],\r\n                  opacity: 1,\r\n                },\r\n              }}\r\n              transition={{ duration: 0.15, delay: line.delay }}\r\n              animate={controls}\r\n            />\r\n          ))}\r\n        </svg>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nAirplaneIcon.displayName = 'AirplaneIcon';\r\n\r\nexport { AirplaneIcon };\r\n",
      "type": "registry:ui"
    }
  ]
}