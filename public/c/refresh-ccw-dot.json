{
  "name": "refresh-ccw-dot",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "refresh-ccw-dot.tsx",
      "content": "'use client';\n\nimport { motion, useAnimation } from 'motion/react';\nimport type { HTMLAttributes } from 'react';\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface RefreshCCWDotIconHandle {\n  startAnimation: () => void;\n  stopAnimation: () => void;\n}\n\ninterface RefreshCCWDotIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number;\n}\n\nconst RefreshCCWDotIcon = forwardRef<\n  RefreshCCWDotIconHandle,\n  RefreshCCWDotIconProps\n>(({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n  const controls = useAnimation();\n  const isControlledRef = useRef(false);\n\n  useImperativeHandle(ref, () => {\n    isControlledRef.current = true;\n    return {\n      startAnimation: () => controls.start('animate'),\n      stopAnimation: () => controls.start('normal'),\n    };\n  });\n\n  const handleMouseEnter = useCallback(\n    (e: React.MouseEvent<HTMLDivElement>) => {\n      if (!isControlledRef.current) controls.start('animate');\n      else onMouseEnter?.(e);\n    },\n    [controls, onMouseEnter]\n  );\n\n  const handleMouseLeave = useCallback(\n    (e: React.MouseEvent<HTMLDivElement>) => {\n      if (!isControlledRef.current) controls.start('normal');\n      else onMouseLeave?.(e);\n    },\n    [controls, onMouseLeave]\n  );\n\n  return (\n    <div\n      className={cn(\n        'cursor-pointer select-none p-2 hover:bg-accent rounded-md transition-colors duration-200 flex items-center justify-center',\n        className\n      )}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      {...props}\n    >\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width={size}\n        height={size}\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeWidth=\"2\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      >\n        <motion.g\n          transition={{ type: 'spring', stiffness: 250, damping: 25 }}\n          variants={{\n            normal: { rotate: '0deg' },\n            animate: { rotate: '-50deg' },\n          }}\n          animate={controls}\n        >\n          <path d=\"M3 2v6h6\" />\n          <path d=\"M21 12A9 9 0 0 0 6 5.3L3 8\" />\n          <path d=\"M21 22v-6h-6\" />\n          <path d=\"M3 12a9 9 0 0 0 15 6.7l3-2.7\" />\n        </motion.g>\n        <circle cx=\"12\" cy=\"12\" r=\"1\" />\n      </svg>\n    </div>\n  );\n});\n\nRefreshCCWDotIcon.displayName = 'RefreshCCWDotIcon';\n\nexport { RefreshCCWDotIcon };\n",
      "type": "registry:ui"
    }
  ]
}