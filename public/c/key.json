{
  "name": "key",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "key.tsx",
      "content": "'use client';\n\nimport { motion, useAnimation } from 'framer-motion';\nimport type { HTMLAttributes } from 'react';\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface KeyIconHandle {\n  startAnimation: () => void;\n  stopAnimation: () => void;\n}\n\ninterface KeyIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number;\n}\n\nconst KeyIcon = forwardRef<KeyIconHandle, KeyIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation();\n    const isControlledRef = useRef(false);\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true;\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      };\n    });\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('animate');\n        } else {\n          onMouseEnter?.(e);\n        }\n      },\n      [controls, onMouseEnter]\n    );\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal');\n        } else {\n          onMouseLeave?.(e);\n        }\n      },\n      [controls, onMouseLeave]\n    );\n\n    return (\n      <div\n        className={cn(\n          `cursor-pointer select-none p-2 hover:bg-accent rounded-md transition-colors duration-200 flex items-center justify-center`,\n          className\n        )}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <motion.svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          animate={controls}\n          initial=\"normal\"\n          variants={{\n            normal: {\n              rotate: 0,\n              transition: {\n                type: 'spring',\n                stiffness: 120,\n                damping: 14,\n                duration: 0.8,\n              },\n            },\n            animate: {\n              rotate: [-3, -33, -25, -28],\n              transition: {\n                duration: 0.6,\n                times: [0, 0.6, 0.8, 1],\n                ease: 'easeInOut',\n              },\n            },\n          }}\n          style={{ originX: 0.3, originY: 0.7 }}\n        >\n          <path d=\"m15.5 7.5 2.3 2.3a1 1 0 0 0 1.4 0l2.1-2.1a1 1 0 0 0 0-1.4L19 4\" />\n          <path d=\"m21 2-9.6 9.6\" />\n          <circle cx=\"7.5\" cy=\"15.5\" r=\"5.5\" />\n        </motion.svg>\n      </div>\n    );\n  }\n);\n\nKeyIcon.displayName = 'KeyIcon';\n\nexport { KeyIcon };\n",
      "type": "registry:ui"
    }
  ]
}