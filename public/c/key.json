{
  "name": "key",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "key.tsx",
      "content": "'use client';\r\n\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface KeyIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface KeyIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst KeyIcon = forwardRef<KeyIconHandle, KeyIconProps>(\r\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n    const controls = useAnimation();\r\n    const isControlledRef = useRef(false);\r\n\r\n    useImperativeHandle(ref, () => {\r\n      isControlledRef.current = true;\r\n      return {\r\n        startAnimation: () => controls.start('animate'),\r\n        stopAnimation: () => controls.start('normal'),\r\n      };\r\n    });\r\n\r\n    const handleMouseEnter = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('animate');\r\n        } else {\r\n          onMouseEnter?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseEnter]\r\n    );\r\n\r\n    const handleMouseLeave = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('normal');\r\n        } else {\r\n          onMouseLeave?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseLeave]\r\n    );\r\n\r\n    return (\r\n      <div\r\n        className={cn(className)}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        {...props}\r\n      >\r\n        <motion.svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={size}\r\n          height={size}\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          animate={controls}\r\n          initial=\"normal\"\r\n          variants={{\r\n            normal: {\r\n              rotate: 0,\r\n              transition: {\r\n                type: 'spring',\r\n                stiffness: 120,\r\n                damping: 14,\r\n                duration: 0.8,\r\n              },\r\n            },\r\n            animate: {\r\n              rotate: [-3, -33, -25, -28],\r\n              transition: {\r\n                duration: 0.6,\r\n                times: [0, 0.6, 0.8, 1],\r\n                ease: 'easeInOut',\r\n              },\r\n            },\r\n          }}\r\n          style={{ originX: 0.3, originY: 0.7 }}\r\n        >\r\n          <path d=\"m15.5 7.5 2.3 2.3a1 1 0 0 0 1.4 0l2.1-2.1a1 1 0 0 0 0-1.4L19 4\" />\r\n          <path d=\"m21 2-9.6 9.6\" />\r\n          <circle cx=\"7.5\" cy=\"15.5\" r=\"5.5\" />\r\n        </motion.svg>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nKeyIcon.displayName = 'KeyIcon';\r\n\r\nexport { KeyIcon };\r\n",
      "type": "registry:ui"
    }
  ]
}