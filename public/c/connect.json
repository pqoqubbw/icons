{
  "name": "connect",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "connect.tsx",
      "content": "'use client';\r\n\r\nimport type { Variants } from 'motion/react';\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface ConnectIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface ConnectIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst plugVariants: Variants = {\r\n  normal: {\r\n    x: 0,\r\n    y: 0,\r\n  },\r\n  animate: {\r\n    x: -3,\r\n    y: 3,\r\n  },\r\n};\r\n\r\nconst socketVariants: Variants = {\r\n  normal: {\r\n    x: 0,\r\n    y: 0,\r\n  },\r\n  animate: {\r\n    x: 3,\r\n    y: -3,\r\n  },\r\n};\r\n\r\nconst pathVariants = {\r\n  normal: (custom: { x: number; y: number }) => ({\r\n    d: `M${custom.x} ${custom.y} l2.5 -2.5`,\r\n  }),\r\n  animate: (custom: { x: number; y: number }) => ({\r\n    d: `M${custom.x + 2.93} ${custom.y - 2.93} l0.10 -0.10`,\r\n  }),\r\n};\r\n\r\nconst ConnectIcon = forwardRef<ConnectIconHandle, ConnectIconProps>(\r\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n    const controls = useAnimation();\r\n    const isControlledRef = useRef(false);\r\n\r\n    useImperativeHandle(ref, () => {\r\n      isControlledRef.current = true;\r\n\r\n      return {\r\n        startAnimation: () => controls.start('animate'),\r\n        stopAnimation: () => controls.start('normal'),\r\n      };\r\n    });\r\n\r\n    const handleMouseEnter = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('animate');\r\n        } else {\r\n          onMouseEnter?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseEnter]\r\n    );\r\n\r\n    const handleMouseLeave = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('normal');\r\n        } else {\r\n          onMouseLeave?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseLeave]\r\n    );\r\n\r\n    return (\r\n      <div\r\n        className={cn(className)}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        {...props}\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={size}\r\n          height={size}\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n        >\r\n          <motion.path\r\n            d=\"M19 5l3 -3\"\r\n            variants={{\r\n              normal: {\r\n                d: 'M19 5l3 -3',\r\n              },\r\n              animate: {\r\n                d: 'M17 7l5 -5',\r\n              },\r\n            }}\r\n            animate={controls}\r\n            transition={{ type: 'spring', stiffness: 500, damping: 30 }}\r\n          />\r\n          <motion.path\r\n            d=\"m2 22 3-3\"\r\n            variants={{\r\n              normal: {\r\n                d: 'm2 22 3-3',\r\n              },\r\n              animate: {\r\n                d: 'm2 22 6-6',\r\n              },\r\n            }}\r\n            animate={controls}\r\n            transition={{ type: 'spring', stiffness: 500, damping: 30 }}\r\n          />\r\n          <motion.path\r\n            d=\"M6.3 20.3a2.4 2.4 0 0 0 3.4 0L12 18l-6-6-2.3 2.3a2.4 2.4 0 0 0 0 3.4Z\"\r\n            variants={socketVariants}\r\n            animate={controls}\r\n            transition={{ type: 'spring', stiffness: 500, damping: 30 }}\r\n          />\r\n          <motion.path\r\n            variants={pathVariants}\r\n            custom={{ x: 7.5, y: 13.5 }}\r\n            initial=\"normal\"\r\n            animate={controls}\r\n            transition={{ type: 'spring', stiffness: 500, damping: 30 }}\r\n          />\r\n          <motion.path\r\n            variants={pathVariants}\r\n            custom={{ x: 10.5, y: 16.5 }}\r\n            initial=\"normal\"\r\n            animate={controls}\r\n            transition={{ type: 'spring', stiffness: 500, damping: 30 }}\r\n          />\r\n          <motion.path\r\n            d=\"m12 6 6 6 2.3-2.3a2.4 2.4 0 0 0 0-3.4l-2.6-2.6a2.4 2.4 0 0 0-3.4 0Z\"\r\n            variants={plugVariants}\r\n            animate={controls}\r\n            transition={{ type: 'spring', stiffness: 500, damping: 30 }}\r\n          />\r\n        </svg>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nConnectIcon.displayName = 'ConnectIcon';\r\n\r\nexport { ConnectIcon };\r\n",
      "type": "registry:ui"
    }
  ]
}