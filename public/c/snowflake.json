{
  "name": "snowflake",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "snowflake.tsx",
      "content": "'use client';\r\n\r\nimport { motion, useAnimation, type Variants } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nconst pathVariants: Variants = {\r\n  normal: {\r\n    rotate: 0,\r\n  },\r\n  animate: {\r\n    rotate: [0, -5, 5, -5, 5, 0],\r\n    transition: {\r\n      duration: 0.4,\r\n      times: [0, 0.2, 0.4, 0.6, 0.8, 1],\r\n    },\r\n  },\r\n};\r\n\r\nexport interface SnowflakeIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface SnowflakeIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst SnowflakeIcon = forwardRef<SnowflakeIconHandle, SnowflakeIconProps>(\r\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n    const controls = useAnimation();\r\n    const isControlledRef = useRef(false);\r\n\r\n    useImperativeHandle(ref, () => {\r\n      isControlledRef.current = true;\r\n\r\n      return {\r\n        startAnimation: () => controls.start('animate'),\r\n        stopAnimation: () => controls.start('normal'),\r\n      };\r\n    });\r\n\r\n    const handleMouseEnter = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('animate');\r\n        } else {\r\n          onMouseEnter?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseEnter]\r\n    );\r\n\r\n    const handleMouseLeave = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('normal');\r\n        } else {\r\n          onMouseLeave?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseLeave]\r\n    );\r\n\r\n    return (\r\n      <div\r\n        className={cn(className)}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        {...props}\r\n      >\r\n        <motion.svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={size}\r\n          height={size}\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          variants={pathVariants}\r\n          animate={controls}\r\n          style={{ transformOrigin: 'center' }}\r\n        >\r\n          <path d=\"m10 20-1.25-2.5L6 18\" />\r\n          <path d=\"M10 4 8.75 6.5 6 6\" />\r\n          <path d=\"m14 20 1.25-2.5L18 18\" />\r\n          <path d=\"m14 4 1.25 2.5L18 6\" />\r\n          <path d=\"m17 21-3-6h-4\" />\r\n          <path d=\"m17 3-3 6 1.5 3\" />\r\n          <path d=\"M2 12h6.5L10 9\" />\r\n          <path d=\"m20 10-1.5 2 1.5 2\" />\r\n          <path d=\"M22 12h-6.5L14 15\" />\r\n          <path d=\"m4 10 1.5 2L4 14\" />\r\n          <path d=\"m7 21 3-6-1.5-3\" />\r\n          <path d=\"m7 3 3 6h4\" />\r\n        </motion.svg>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nSnowflakeIcon.displayName = 'SnowflakeIcon';\r\n\r\nexport { SnowflakeIcon };\r\n",
      "type": "registry:ui"
    }
  ]
}