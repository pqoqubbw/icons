{
  "name": "radio",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "radio.tsx",
      "content": "'use client';\r\n\r\nimport type { Variants } from 'motion/react';\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface RadioIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface RadioIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst variants: Variants = {\r\n  normal: {\r\n    opacity: 1,\r\n    transition: {\r\n      duration: 0.4,\r\n    },\r\n  },\r\n  fadeOut: {\r\n    opacity: 0,\r\n    transition: { duration: 0.3 },\r\n  },\r\n  fadeIn: (i: number) => ({\r\n    opacity: 1,\r\n    transition: {\r\n      type: 'spring',\r\n      stiffness: 300,\r\n      damping: 20,\r\n      delay: i * 0.1,\r\n    },\r\n  }),\r\n};\r\n\r\nconst RadioIcon = forwardRef<RadioIconHandle, RadioIconProps>(\r\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n    const controls = useAnimation();\r\n    const isControlledRef = useRef(false);\r\n\r\n    useImperativeHandle(ref, () => {\r\n      isControlledRef.current = true;\r\n\r\n      return {\r\n        startAnimation: async () => {\r\n          await controls.start('fadeOut');\r\n          controls.start('fadeIn');\r\n        },\r\n        stopAnimation: () => controls.start('normal'),\r\n      };\r\n    });\r\n\r\n    const handleMouseEnter = useCallback(\r\n      async (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          await controls.start('fadeOut');\r\n          controls.start('fadeIn');\r\n        } else {\r\n          onMouseEnter?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseEnter]\r\n    );\r\n\r\n    const handleMouseLeave = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('normal');\r\n        } else {\r\n          onMouseLeave?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseLeave]\r\n    );\r\n\r\n    return (\r\n      <div\r\n        className={cn(className)}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        {...props}\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={size}\r\n          height={size}\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n        >\r\n          <motion.path\r\n            d=\"M4.9 19.1C1 15.2 1 8.8 4.9 4.9\"\r\n            initial={{ opacity: 1 }}\r\n            variants={variants}\r\n            animate={controls}\r\n            custom={1}\r\n          />\r\n          <motion.path\r\n            d=\"M7.8 16.2c-2.3-2.3-2.3-6.1 0-8.5\"\r\n            initial={{ opacity: 1 }}\r\n            variants={variants}\r\n            animate={controls}\r\n            custom={0}\r\n          />\r\n          <circle cx=\"12\" cy=\"12\" r=\"2\" />\r\n          <motion.path\r\n            d=\"M16.2 7.8c2.3 2.3 2.3 6.1 0 8.5\"\r\n            initial={{ opacity: 1 }}\r\n            variants={variants}\r\n            animate={controls}\r\n            custom={0}\r\n          />\r\n          <motion.path\r\n            d=\"M19.1 4.9C23 8.8 23 15.1 19.1 19\"\r\n            initial={{ opacity: 1 }}\r\n            variants={variants}\r\n            animate={controls}\r\n            custom={1}\r\n          />\r\n        </svg>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nRadioIcon.displayName = 'RadioIcon';\r\n\r\nexport { RadioIcon };\r\n",
      "type": "registry:ui"
    }
  ]
}