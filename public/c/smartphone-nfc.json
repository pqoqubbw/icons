{
  "name": "smartphone-nfc",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "smartphone-nfc.tsx",
      "content": "'use client';\n\nimport { motion, useAnimation, type Variants } from 'motion/react';\nimport type { HTMLAttributes } from 'react';\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface SmartphoneNfcIconHandle {\n  startAnimation: () => void;\n  stopAnimation: () => void;\n}\n\ninterface SmartphoneNfcIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number;\n}\n\nconst PATH_VARIANTS: Variants = {\n  normal: {\n    opacity: 1,\n    transition: {\n      duration: 0.4,\n    },\n  },\n  fadeOut: {\n    opacity: 0,\n    transition: { duration: 0.3 },\n  },\n  fadeIn: (i: number) => ({\n    opacity: 1,\n    transition: {\n      type: 'spring',\n      stiffness: 300,\n      damping: 20,\n      delay: i * 0.1,\n    },\n  }),\n};\n\nconst SmartphoneNfcIcon = forwardRef<\n  SmartphoneNfcIconHandle,\n  SmartphoneNfcIconProps\n>(({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n  const controls = useAnimation();\n  const isControlledRef = useRef(false);\n\n  useImperativeHandle(ref, () => {\n    isControlledRef.current = true;\n    return {\n      startAnimation: async () => {\n        await controls.start('fadeOut');\n        controls.start('fadeIn');\n      },\n      stopAnimation: () => controls.start('normal'),\n    };\n  });\n\n  const handleMouseEnter = useCallback(\n    async (e: React.MouseEvent<HTMLDivElement>) => {\n      if (!isControlledRef.current) {\n        await controls.start('fadeOut');\n        controls.start('fadeIn');\n      } else {\n        onMouseEnter?.(e);\n      }\n    },\n    [controls, onMouseEnter]\n  );\n\n  const handleMouseLeave = useCallback(\n    (e: React.MouseEvent<HTMLDivElement>) => {\n      if (!isControlledRef.current) {\n        controls.start('normal');\n      } else {\n        onMouseLeave?.(e);\n      }\n    },\n    [controls, onMouseLeave]\n  );\n\n  return (\n    <div\n      className={cn(className)}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      {...props}\n    >\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width={size}\n        height={size}\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeWidth=\"2\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      >\n        <rect width=\"7\" height=\"12\" x=\"2\" y=\"6\" rx=\"1\" />\n        <motion.path\n          d=\"M13 8.32a7.43 7.43 0 0 1 0 7.36\"\n          initial={{ opacity: 1 }}\n          variants={PATH_VARIANTS}\n          animate={controls}\n          custom={0}\n        />\n        <motion.path\n          d=\"M16.46 6.21a11.76 11.76 0 0 1 0 11.58\"\n          initial={{ opacity: 1 }}\n          variants={PATH_VARIANTS}\n          animate={controls}\n          custom={1}\n        />\n        <motion.path\n          d=\"M19.91 4.1a15.91 15.91 0 0 1 .01 15.8\"\n          initial={{ opacity: 1 }}\n          variants={PATH_VARIANTS}\n          animate={controls}\n          custom={2}\n        />\n      </svg>\n    </div>\n  );\n});\n\nSmartphoneNfcIcon.displayName = 'SmartphoneNfcIcon';\n\nexport { SmartphoneNfcIcon };\n",
      "type": "registry:ui"
    }
  ]
}