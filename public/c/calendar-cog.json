{
  "name": "calendar-cog",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "calendar-cog.tsx",
      "content": "'use client';\n\nimport type { Variants } from 'motion/react';\nimport { motion, useAnimation } from 'motion/react';\nimport type { HTMLAttributes } from 'react';\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface CalendarCogIconHandle {\n  startAnimation: () => void;\n  stopAnimation: () => void;\n}\n\ninterface CalendarCogIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number;\n}\n\nconst gVariants: Variants = {\n  normal: { rotate: 0 },\n  animate: { rotate: 180 },\n};\n\nconst CalendarCogIcon = forwardRef<CalendarCogIconHandle, CalendarCogIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation();\n    const isControlledRef = useRef(false);\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true;\n\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      };\n    });\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('animate');\n        } else {\n          onMouseEnter?.(e);\n        }\n      },\n      [controls, onMouseEnter]\n    );\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal');\n        } else {\n          onMouseLeave?.(e);\n        }\n      },\n      [controls, onMouseLeave]\n    );\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        >\n          <path d=\"M21 10.5V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h6\" />\n          <path d=\"M16 2v4\" />\n          <path d=\"M3 10h18\" />\n          <path d=\"M8 2v4\" />\n          <motion.g\n            transition={{ type: 'spring', stiffness: 50, damping: 10 }}\n            variants={gVariants}\n            animate={controls}\n          >\n            <path d=\"m15.2 16.9-.9-.4\" />\n            <path d=\"m15.2 19.1-.9.4\" />\n            <path d=\"m16.9 15.2-.4-.9\" />\n            <path d=\"m16.9 20.8-.4.9\" />\n            <path d=\"m19.5 14.3-.4.9\" />\n            <path d=\"m19.5 21.7-.4-.9\" />\n            <path d=\"m21.7 16.5-.9.4\" />\n            <path d=\"m21.7 19.5-.9-.4\" />\n            <circle cx=\"18\" cy=\"18\" r=\"3\" />\n          </motion.g>\n        </svg>\n      </div>\n    );\n  }\n);\n\nCalendarCogIcon.displayName = 'CalendarCogIcon';\n\nexport { CalendarCogIcon };\n",
      "type": "registry:ui"
    }
  ]
}