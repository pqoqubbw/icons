{
  "name": "file-text",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "file-text.tsx",
      "content": "'use client';\n\nimport React, {\n  forwardRef,\n  useCallback,\n  useImperativeHandle,\n  useRef,\n} from 'react';\nimport { motion, useAnimation } from 'motion/react';\nimport type { HTMLAttributes } from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface FileTextIconHandle {\n  startAnimation: () => void;\n  stopAnimation: () => void;\n}\n\ninterface FileTextIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number;\n}\n\nconst FileText = forwardRef<FileTextIconHandle, FileTextIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation();\n    const isControlledRef = useRef(false);\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true;\n\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      };\n    });\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('animate');\n        } else {\n          onMouseEnter?.(e);\n        }\n      },\n      [controls, onMouseEnter]\n    );\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal');\n        } else {\n          onMouseLeave?.(e);\n        }\n      },\n      [controls, onMouseLeave]\n    );\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <motion.svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          initial=\"normal\"\n          animate={controls}\n          variants={{\n            normal: { scale: 1 },\n            animate: {\n              scale: 1.05,\n              transition: {\n                duration: 0.3,\n                ease: 'easeOut',\n              },\n            },\n          }}\n        >\n          <path d=\"M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z\" />\n          <path d=\"M14 2v4a2 2 0 0 0 2 2h4\" />\n\n          <motion.path\n            d=\"M10 9H8\"\n            stroke=\"currentColor\"\n            strokeWidth=\"2\"\n            variants={{\n              normal: {\n                pathLength: 1,\n                x1: 8,\n                x2: 10,\n              },\n              animate: {\n                pathLength: [1, 0, 1],\n                x1: [8, 10, 8],\n                x2: [10, 10, 10],\n                transition: {\n                  duration: 0.7,\n                  delay: 0.3,\n                },\n              },\n            }}\n          />\n          <motion.path\n            d=\"M16 13H8\"\n            stroke=\"currentColor\"\n            strokeWidth=\"2\"\n            variants={{\n              normal: {\n                pathLength: 1,\n                x1: 8,\n                x2: 16,\n              },\n              animate: {\n                pathLength: [1, 0, 1],\n                x1: [8, 16, 8],\n                x2: [16, 16, 16],\n                transition: {\n                  duration: 0.7,\n                  delay: 0.5,\n                },\n              },\n            }}\n          />\n          <motion.path\n            d=\"M16 17H8\"\n            stroke=\"currentColor\"\n            strokeWidth=\"2\"\n            variants={{\n              normal: {\n                pathLength: 1,\n                x1: 8,\n                x2: 16,\n              },\n              animate: {\n                pathLength: [1, 0, 1],\n                x1: [8, 16, 8],\n                x2: [16, 16, 16],\n                transition: {\n                  duration: 0.7,\n                  delay: 0.7,\n                },\n              },\n            }}\n          />\n        </motion.svg>\n      </div>\n    );\n  }\n);\n\nFileText.displayName = 'FileTextIcon';\n\nexport { FileText as FileTextIcon };\n",
      "type": "registry:ui"
    }
  ]
}