{
  "name": "telescope",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "telescope.tsx",
      "content": "'use client';\n\nimport type { Variants } from 'motion/react';\nimport { motion, useAnimation } from 'motion/react';\nimport type { HTMLAttributes } from 'react';\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface TelescopeIconHandle {\n  startAnimation: () => void;\n  stopAnimation: () => void;\n}\n\ninterface TelescopeIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number;\n}\n\nconst scopeVariants: Variants = {\n  normal: {\n    rotate: 0,\n    transition: {\n      duration: 0.6,\n      ease: 'easeInOut',\n    },\n  },\n  animate: {\n    rotate: -15,\n    transition: {\n      duration: 0.8,\n      ease: 'easeInOut',\n    },\n  },\n};\n\nconst TelescopeIcon = forwardRef<TelescopeIconHandle, TelescopeIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation();\n    const isControlledRef = useRef(false);\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true;\n\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      };\n    });\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('animate');\n        } else {\n          onMouseEnter?.(e);\n        }\n      },\n      [controls, onMouseEnter]\n    );\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal');\n        } else {\n          onMouseLeave?.(e);\n        }\n      },\n      [controls, onMouseLeave]\n    );\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        >\n          <motion.g\n            variants={scopeVariants}\n            animate={controls}\n            style={{ transformOrigin: '12px 13px' }}\n          >\n            <path d=\"m10.065 12.493-6.18 1.318a.934.934 0 0 1-1.108-.702l-.537-2.15a1.07 1.07 0 0 1 .691-1.265l13.504-4.44\" />\n            <path d=\"m13.56 11.747 4.332-.924\" />\n            <path d=\"m10.065 12.493-6.18 1.318a.934.934 0 0 1-1.108-.702l-.537-2.15a1.07 1.07 0 0 1 .691-1.265l13.504-4.44\" />\n            <path d=\"m13.56 11.747 4.332-.924\" />\n            <path d=\"M16.485 5.94a2 2 0 0 1 1.455-2.425l1.09-.272a1 1 0 0 1 1.212.727l1.515 6.06a1 1 0 0 1-.727 1.213l-1.09.272a2 2 0 0 1-2.425-1.455z\" />\n            <path d=\"m6.158 8.633 1.114 4.456\" />\n          </motion.g>\n          <path d=\"m16 21-3.105-6.21\" />\n          <path d=\"m8 21 3.105-6.21\" />\n          <circle cx=\"12\" cy=\"13\" r=\"2\" />\n        </svg>\n      </div>\n    );\n  }\n);\n\nTelescopeIcon.displayName = 'TelescopeIcon';\n\nexport { TelescopeIcon };\n",
      "type": "registry:ui"
    }
  ]
}