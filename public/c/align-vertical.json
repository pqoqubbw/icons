{
  "name": "align-vertical",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "align-vertical.tsx",
      "content": "'use client';\n\nimport type { Transition } from 'motion/react';\nimport { motion, useAnimation } from 'motion/react';\nimport type { HTMLAttributes } from 'react';\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface AlignVerticalIconHandle {\n  startAnimation: () => void;\n  stopAnimation: () => void;\n}\n\ninterface AlignVerticalIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number;\n}\n\nconst defaultTransition: Transition = {\n  type: 'spring',\n  stiffness: 160,\n  damping: 17,\n  mass: 1,\n};\n\nconst AlignVerticalIcon = forwardRef<\n  AlignVerticalIconHandle,\n  AlignVerticalIconProps\n>(({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n  const controls = useAnimation();\n  const isControlledRef = useRef(false);\n\n  useImperativeHandle(ref, () => {\n    isControlledRef.current = true;\n\n    return {\n      startAnimation: () => controls.start('animate'),\n      stopAnimation: () => controls.start('normal'),\n    };\n  });\n\n  const handleMouseEnter = useCallback(\n    (e: React.MouseEvent<HTMLDivElement>) => {\n      if (!isControlledRef.current) {\n        controls.start('animate');\n      } else {\n        onMouseEnter?.(e);\n      }\n    },\n    [controls, onMouseEnter]\n  );\n\n  const handleMouseLeave = useCallback(\n    (e: React.MouseEvent<HTMLDivElement>) => {\n      if (!isControlledRef.current) {\n        controls.start('normal');\n      } else {\n        onMouseLeave?.(e);\n      }\n    },\n    [controls, onMouseLeave]\n  );\n\n  return (\n    <div\n      className={cn(className)}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      {...props}\n    >\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width={size}\n        height={size}\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeWidth=\"2\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      >\n        <motion.rect\n          variants={{\n            normal: { scaleY: 1 },\n            animate: { scaleY: 0.8 },\n          }}\n          animate={controls}\n          width=\"10\"\n          height=\"6\"\n          x=\"7\"\n          y=\"9\"\n          rx=\"2\"\n          transition={defaultTransition}\n        />\n        <motion.path\n          variants={{\n            normal: { translateY: 0, scaleX: 1 },\n            animate: {\n              translateY: -2,\n              scaleX: 0.9,\n            },\n          }}\n          animate={controls}\n          transition={defaultTransition}\n          d=\"M22 20H2\"\n        />\n        <motion.path\n          variants={{\n            normal: { translateY: 0, scaleX: 1 },\n            animate: {\n              translateY: 2,\n              scaleX: 0.9,\n            },\n          }}\n          animate={controls}\n          transition={defaultTransition}\n          d=\"M22 4H2\"\n        />\n      </svg>\n    </div>\n  );\n});\n\nAlignVerticalIcon.displayName = 'AlignVerticalIcon';\n\nexport { AlignVerticalIcon };\n",
      "type": "registry:ui"
    }
  ]
}