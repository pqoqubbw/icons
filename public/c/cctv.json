{
  "name": "cctv",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "cctv.tsx",
      "content": "'use client';\n\nimport type { Variants } from 'motion/react';\nimport { motion, useAnimation } from 'motion/react';\nimport type { HTMLAttributes } from 'react';\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface CctvIconHandle {\n  startAnimation: () => void;\n  stopAnimation: () => void;\n}\n\ninterface CctvIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number;\n}\n\nconst dotVariants: Variants = {\n  normal: { opacity: 1 },\n  animate: {\n    opacity: [1, 0, 1],\n    transition: {\n      duration: 1,\n      repeat: Infinity,\n    },\n  },\n};\n\nconst cctvVariants: Variants = {\n  normal: { rotate: 0 },\n  animate: {\n    rotate: [0, -15, 10, 0],\n    originX: '9px',\n    originY: '15px',\n    transition: {\n      duration: 2,\n      ease: 'easeInOut',\n    },\n  },\n};\n\nconst CctvIcon = forwardRef<CctvIconHandle, CctvIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation();\n    const isControlledRef = useRef(false);\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true;\n\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      };\n    });\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('animate');\n        } else {\n          onMouseEnter?.(e);\n        }\n      },\n      [controls, onMouseEnter]\n    );\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal');\n        } else {\n          onMouseLeave?.(e);\n        }\n      },\n      [controls, onMouseLeave]\n    );\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        >\n          <motion.g variants={cctvVariants} animate={controls}>\n            <path d=\"M16.75 12h3.632a1 1 0 0 1 .894 1.447l-2.034 4.069a1 1 0 0 1-1.708.134l-2.124-2.97\" />\n            <path d=\"M17.106 9.053a1 1 0 0 1 .447 1.341l-3.106 6.211a1 1 0 0 1-1.342.447L3.61 12.3a2.92 2.92 0 0 1-1.3-3.91L3.69 5.6a2.92 2.92 0 0 1 3.92-1.3z\" />\n            <motion.path\n              d=\"M7 9h.01\"\n              variants={dotVariants}\n              animate={controls}\n            />\n          </motion.g>\n          <path d=\"M2 19h3.76a2 2 0 0 0 1.8-1.1L9 15\" />\n          <path d=\"M2 21v-4\" />\n        </svg>\n      </div>\n    );\n  }\n);\n\nCctvIcon.displayName = 'CctvIcon';\n\nexport { CctvIcon };\n",
      "type": "registry:ui"
    }
  ]
}