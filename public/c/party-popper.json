{
  "name": "party-popper",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "party-popper.tsx",
      "content": "'use client';\r\n\r\nimport type { Variants } from 'motion/react';\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface PartyPopperIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface PartyPopperIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst linesVariants: Variants = {\r\n  normal: {\r\n    opacity: 1,\r\n    pathLength: 1,\r\n    scale: 1,\r\n    translateX: 0,\r\n    translateY: 0,\r\n  },\r\n  animate: {\r\n    opacity: [0, 1],\r\n    scale: [0.3, 0.8, 1, 1.1, 1],\r\n    pathLength: [0, 0.5, 1],\r\n    translateX: [-5, 0],\r\n    translateY: [5, 0],\r\n    transition: {\r\n      duration: 0.7,\r\n      velocity: 0.3,\r\n    },\r\n  },\r\n};\r\n\r\nconst dotsVariants: Variants = {\r\n  normal: { opacity: 1, scale: 1, translateX: 0, translateY: 0 },\r\n  animate: {\r\n    opacity: [0, 1],\r\n    translateX: [-5, 0],\r\n    translateY: [5, 0],\r\n    scale: [0.5, 0.8, 1, 1.1, 1],\r\n    transition: {\r\n      duration: 0.7,\r\n    },\r\n  },\r\n};\r\n\r\nconst popperVariants: Variants = {\r\n  normal: { translateX: 0, translateY: 0 },\r\n  animate: {\r\n    translateX: [-1.5, 0],\r\n    translateY: [1.5, 0],\r\n    transition: {\r\n      velocity: 0.3,\r\n    },\r\n  },\r\n};\r\n\r\nconst PartyPopperIcon = forwardRef<PartyPopperIconHandle, PartyPopperIconProps>(\r\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n    const controls = useAnimation();\r\n    const isControlledRef = useRef(false);\r\n\r\n    useImperativeHandle(ref, () => {\r\n      isControlledRef.current = true;\r\n\r\n      return {\r\n        startAnimation: () => controls.start('animate'),\r\n        stopAnimation: () => controls.start('normal'),\r\n      };\r\n    });\r\n\r\n    const handleMouseEnter = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('animate');\r\n        } else {\r\n          onMouseEnter?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseEnter]\r\n    );\r\n\r\n    const handleMouseLeave = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('normal');\r\n        } else {\r\n          onMouseLeave?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseLeave]\r\n    );\r\n\r\n    return (\r\n      <div\r\n        className={cn(className)}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        {...props}\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={size}\r\n          height={size}\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n        >\r\n          <motion.path\r\n            d=\"M5.8 11.3 2 22l10.7-3.79\"\r\n            variants={popperVariants}\r\n            animate={controls}\r\n          />\r\n          <motion.path\r\n            d=\"M11 13c1.93 1.93 2.83 4.17 2 5-.83.83-3.07-.07-5-2-1.93-1.93-2.83-4.17-2-5 .83-.83 3.07.07 5 2Z\"\r\n            variants={popperVariants}\r\n            animate={controls}\r\n          />\r\n          <motion.path\r\n            d=\"M4 3h.01\"\r\n            variants={dotsVariants}\r\n            animate={controls}\r\n          />\r\n          <motion.path\r\n            d=\"M22 8h.01\"\r\n            variants={dotsVariants}\r\n            animate={controls}\r\n          />\r\n          <motion.path\r\n            d=\"M15 2h.01\"\r\n            variants={dotsVariants}\r\n            animate={controls}\r\n          />\r\n          <motion.path\r\n            d=\"M22 20h.01\"\r\n            variants={dotsVariants}\r\n            animate={controls}\r\n          />\r\n          <motion.path\r\n            d=\"m14 10 1.21-1.06c0.16-0.84 0.9-1.44 1.76-1.44h0.38c0.88 0 1.55-0.77 1.45-1.63a2.9 2.9 0 0 1 1.96-3.12L22 2\"\r\n            variants={linesVariants}\r\n            animate={controls}\r\n          />\r\n          <motion.path\r\n            d=\"M17 15h0.77c0.71 0 1.32-0.52 1.43-1.22c0.16-0.91 1.12-1.45 1.98-1.11L22 13\"\r\n            variants={linesVariants}\r\n            animate={controls}\r\n          />\r\n          <motion.path\r\n            d=\"M9 7V6.23c0-0.71 0.52-1.33 1.22-1.43c0.91-0.16 1.45-1.12 1.11-1.98L11 2\"\r\n            variants={linesVariants}\r\n            animate={controls}\r\n          />\r\n        </svg>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nPartyPopperIcon.displayName = 'PartyPopperIcon';\r\n\r\nexport { PartyPopperIcon };\r\n",
      "type": "registry:ui"
    }
  ]
}