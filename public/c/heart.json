{
  "name": "heart",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "heart.tsx",
      "content": "'use client';\n\nimport type { Variants } from 'motion/react';\nimport { motion, useAnimation } from 'motion/react';\nimport type { HTMLAttributes } from 'react';\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface HeartIconHandle {\n  startAnimation: () => void;\n  stopAnimation: () => void;\n}\n\ninterface HeartIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number;\n}\n\nconst heartPathVariants: Variants = {\n  normal: {\n    pathLength: 1,\n    opacity: 1,\n    scale: 1,\n    fill: 'transparent',\n    transition: {\n      duration: 0.3,\n      ease: 'easeInOut',\n    },\n  },\n  animate: (custom: number) => ({\n    pathLength: [0, 1],\n    opacity: [0, 1],\n    scale: [0.8, 1],\n    fill: ['transparent', 'transparent'],\n    transition: {\n      pathLength: { duration: 0.6, ease: 'easeInOut', delay: custom * 0.1 },\n      opacity: { duration: 0.3, ease: 'easeInOut', delay: custom * 0.1 },\n      scale: { duration: 0.5, ease: 'easeOut', delay: custom * 0.1 },\n      fill: { duration: 0.3, ease: 'easeInOut', delay: 0.3 + custom * 0.1 },\n    },\n  }),\n  pulse: {\n    scale: [1, 1.1, 1],\n    transition: {\n      duration: 0.6,\n      ease: 'easeInOut',\n      times: [0, 0.5, 1],\n      repeat: 1,\n    },\n  },\n};\n\nconst HeartIcon = forwardRef<HeartIconHandle, HeartIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation();\n    const isControlledRef = useRef(false);\n\n    const animationSequence = useCallback(async () => {\n      await controls.start('animate');\n      await controls.start('pulse');\n    }, [controls]);\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true;\n      return {\n        startAnimation: () => animationSequence(),\n        stopAnimation: () => controls.start('normal'),\n      };\n    });\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          animationSequence();\n        } else {\n          onMouseEnter?.(e);\n        }\n      },\n      [animationSequence, onMouseEnter]\n    );\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal');\n        } else {\n          onMouseLeave?.(e);\n        }\n      },\n      [controls, onMouseLeave]\n    );\n\n    return (\n      <div\n        className={cn(\n          'cursor-pointer select-none p-2 hover:bg-accent rounded-md transition-colors duration-200 flex items-center justify-center',\n          className\n        )}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        >\n          <motion.path\n            d=\"M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3.332.805-4.5 2.05C10.876 3.805 9.288 3 7.5 3A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z\"\n            initial=\"normal\"\n            animate={controls}\n            variants={heartPathVariants}\n            custom={0}\n          />\n        </svg>\n      </div>\n    );\n  }\n);\n\nHeartIcon.displayName = 'HeartIcon';\n\nexport { HeartIcon };\n",
      "type": "registry:ui"
    }
  ]
}