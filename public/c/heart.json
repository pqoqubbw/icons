{
	"name": "heart",
	"type": "registry:ui",
	"registryDependencies": [],
	"dependencies": [
		"motion"
	],
	"devDependencies": [],
	"tailwind": {},
	"cssVars": {
		"light": {},
		"dark": {}
	},
	"files": [
		{
			"path": "heart.tsx",
			"content": "'use client';\n\nimport type { Variants } from 'motion/react';\nimport { motion, useAnimation } from 'motion/react';\nimport type { HTMLAttributes } from 'react';\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface HeartIconHandle {\n\tstartAnimation: () => void;\n\tstopAnimation: () => void;\n}\n\ninterface HeartIconProps extends HTMLAttributes<HTMLDivElement> {\n\tsize?: number;\n}\n\nconst heartPathVariants: Variants = {\n\tnormal: {\n\t\tpathLength: 1,\n\t\topacity: 1,\n\t\tscale: 1,\n\t\tfill: 'transparent',\n\t\ttransition: {\n\t\t\tduration: 0.3,\n\t\t\tease: 'easeInOut',\n\t\t},\n\t},\n\tanimate: (custom: number) => ({\n\t\tpathLength: [0, 1],\n\t\topacity: [0, 1],\n\t\tscale: [0.8, 1],\n\t\tfill: ['transparent', 'transparent'],\n\t\ttransition: {\n\t\t\tpathLength: { duration: 0.6, ease: 'easeInOut', delay: custom * 0.1 },\n\t\t\topacity: { duration: 0.3, ease: 'easeInOut', delay: custom * 0.1 },\n\t\t\tscale: { duration: 0.5, ease: 'easeOut', delay: custom * 0.1 },\n\t\t\tfill: { duration: 0.3, ease: 'easeInOut', delay: 0.3 + custom * 0.1 },\n\t\t},\n\t}),\n\tpulse: {\n\t\tscale: [1, 1.1, 1],\n\t\ttransition: {\n\t\t\tduration: 0.6,\n\t\t\tease: 'easeInOut',\n\t\t\ttimes: [0, 0.5, 1],\n\t\t\trepeat: 1,\n\t\t},\n\t},\n};\n\nconst HeartIcon = forwardRef<HeartIconHandle, HeartIconProps>(\n\t({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n\t\tconst controls = useAnimation();\n\t\tconst isControlledRef = useRef(false);\n\n\t\tconst animationSequence = async () => {\n\t\t\tawait controls.start('animate');\n\t\t\tawait controls.start('pulse');\n\t\t};\n\n\t\tuseImperativeHandle(ref, () => {\n\t\t\tisControlledRef.current = true;\n\t\t\treturn {\n\t\t\t\tstartAnimation: () => animationSequence(),\n\t\t\t\tstopAnimation: () => controls.start('normal'),\n\t\t\t};\n\t\t});\n\n\t\tconst handleMouseEnter = useCallback(\n\t\t\t(e: React.MouseEvent<HTMLDivElement>) => {\n\t\t\t\tif (!isControlledRef.current) {\n\t\t\t\t\tanimationSequence();\n\t\t\t\t} else {\n\t\t\t\t\tonMouseEnter?.(e);\n\t\t\t\t}\n\t\t\t},\n\t\t\t[controls, onMouseEnter]\n\t\t);\n\n\t\tconst handleMouseLeave = useCallback(\n\t\t\t(e: React.MouseEvent<HTMLDivElement>) => {\n\t\t\t\tif (!isControlledRef.current) {\n\t\t\t\t\tcontrols.start('normal');\n\t\t\t\t} else {\n\t\t\t\t\tonMouseLeave?.(e);\n\t\t\t\t}\n\t\t\t},\n\t\t\t[controls, onMouseLeave]\n\t\t);\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName={cn(\n\t\t\t\t\t'cursor-pointer select-none p-2 hover:bg-accent rounded-md transition-colors duration-200 flex items-center justify-center',\n\t\t\t\t\tclassName\n\t\t\t\t)}\n\t\t\t\tonMouseEnter={handleMouseEnter}\n\t\t\t\tonMouseLeave={handleMouseLeave}\n\t\t\t\t{...props}\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\twidth={size}\n\t\t\t\t\theight={size}\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstrokeWidth=\"2\"\n\t\t\t\t\tstrokeLinecap=\"round\"\n\t\t\t\t\tstrokeLinejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<motion.path\n\t\t\t\t\t\td=\"M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3.332.805-4.5 2.05C10.876 3.805 9.288 3 7.5 3A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z\"\n\t\t\t\t\t\tinitial=\"normal\"\n\t\t\t\t\t\tanimate={controls}\n\t\t\t\t\t\tvariants={heartPathVariants}\n\t\t\t\t\t\tcustom={0}\n\t\t\t\t\t/>\n\t\t\t\t</svg>\n\t\t\t</div>\n\t\t);\n\t}\n);\n\nHeartIcon.displayName = 'HeartIcon';\n\nexport { HeartIcon };"
		}
	]
}