{
  "name": "angry",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "angry.tsx",
      "content": "'use client';\n\nimport type { Variants } from 'motion/react';\nimport { motion, useAnimation } from 'motion/react';\nimport type { HTMLAttributes } from 'react';\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface AngryIconHandle {\n  startAnimation: () => void;\n  stopAnimation: () => void;\n}\n\ninterface AngryIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number;\n}\n\nconst EYEBROW_ROTATION = 20;\nconst DURATION = 0.6;\n\nconst pathVariantsFace: Variants = {\n  normal: { scale: 1, rotate: 0 },\n  animate: {\n    scale: [1, 1.2, 1.2, 1.2, 1],\n    rotate: [0, -3, 3, -1, 1, 0],\n    transition: {\n      duration: DURATION,\n      times: [0, 0.2, 0.4, 0.6, 1],\n      ease: 'easeInOut',\n    },\n  },\n};\n\nconst pathVariantsLeftEyebrow: Variants = {\n  normal: { rotate: 0 },\n  animate: {\n    rotate: [0, EYEBROW_ROTATION, 0],\n    transition: {\n      duration: DURATION + 0.2,\n    },\n  },\n};\n\nconst pathVariantsRightEyebrow: Variants = {\n  normal: { rotate: 0 },\n  animate: {\n    rotate: [0, -EYEBROW_ROTATION, 0],\n    transition: {\n      duration: DURATION + 0.2,\n    },\n  },\n};\n\nconst pathVariantsEye: Variants = {\n  normal: { scale: 1 },\n  animate: {\n    scale: [1, 1.2, 1],\n    transition: {\n      duration: DURATION,\n    },\n  },\n};\n\nconst pathVariantsMouth: Variants = {\n  normal: { translateY: 0 },\n  animate: {\n    translateY: [0, -0.5, 0],\n    transition: {\n      duration: DURATION,\n    },\n  },\n};\n\nconst AngryIcon = forwardRef<AngryIconHandle, AngryIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation();\n    const isControlledRef = useRef(false);\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true;\n\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      };\n    });\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('animate');\n        } else {\n          onMouseEnter?.(e);\n        }\n      },\n      [controls, onMouseEnter]\n    );\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal');\n        } else {\n          onMouseLeave?.(e);\n        }\n      },\n      [controls, onMouseLeave]\n    );\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <motion.svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          animate={controls}\n          variants={pathVariantsFace}\n        >\n          <circle cx=\"12\" cy=\"12\" r=\"10\" />\n          <motion.path\n            variants={pathVariantsMouth}\n            animate={controls}\n            d=\"M16 16s-1.5-2-4-2-4 2-4 2\"\n          />\n          <motion.path\n            variants={pathVariantsLeftEyebrow}\n            animate={controls}\n            d=\"M7.5 8 10 9\"\n          />\n          <motion.path\n            variants={pathVariantsRightEyebrow}\n            animate={controls}\n            d=\"m14 9 2.5-1\"\n          />\n          <motion.path\n            variants={pathVariantsEye}\n            animate={controls}\n            d=\"M9 10h.01\"\n          />\n          <motion.path\n            variants={pathVariantsEye}\n            animate={controls}\n            d=\"M15 10h.01\"\n          />\n        </motion.svg>\n      </div>\n    );\n  }\n);\n\nAngryIcon.displayName = 'AngryIcon';\n\nexport { AngryIcon };\n",
      "type": "registry:ui"
    }
  ]
}