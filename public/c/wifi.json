{
  "name": "wifi",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "wifi.tsx",
      "content": "'use client';\r\n\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface WifiIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface WifiIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst WIFI_LEVELS = [\r\n  { d: 'M12 20h.01', initialOpacity: 1, delay: 0 },\r\n  { d: 'M8.5 16.429a5 5 0 0 1 7 0', initialOpacity: 1, delay: 0.1 },\r\n  { d: 'M5 12.859a10 10 0 0 1 14 0', initialOpacity: 1, delay: 0.2 },\r\n  { d: 'M2 8.82a15 15 0 0 1 20 0', initialOpacity: 1, delay: 0.3 },\r\n];\r\n\r\nconst WifiIcon = forwardRef<WifiIconHandle, WifiIconProps>(\r\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n    const controls = useAnimation();\r\n\r\n    const isControlledRef = useRef(false);\r\n\r\n    useImperativeHandle(ref, () => {\r\n      isControlledRef.current = true;\r\n\r\n      return {\r\n        startAnimation: async () => {\r\n          await controls.start('fadeOut');\r\n          controls.start('fadeIn');\r\n        },\r\n        stopAnimation: () => controls.start('fadeIn'),\r\n      };\r\n    });\r\n\r\n    const handleMouseEnter = useCallback(\r\n      async (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          await controls.start('fadeOut');\r\n          controls.start('fadeIn');\r\n        } else {\r\n          onMouseEnter?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseEnter]\r\n    );\r\n\r\n    const handleMouseLeave = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        controls.start('fadeIn');\r\n        onMouseLeave?.(e);\r\n      },\r\n      [controls, onMouseLeave]\r\n    );\r\n\r\n    return (\r\n      <div\r\n        className={cn(className)}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        {...props}\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={size}\r\n          height={size}\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n        >\r\n          {WIFI_LEVELS.map((level, index) => (\r\n            <motion.path\r\n              key={index}\r\n              d={level.d}\r\n              initial={{ opacity: level.initialOpacity }}\r\n              animate={controls}\r\n              variants={{\r\n                fadeOut: {\r\n                  opacity: index === 0 ? 1 : 0,\r\n                  transition: { duration: 0.2 },\r\n                },\r\n                fadeIn: {\r\n                  opacity: 1,\r\n                  transition: {\r\n                    type: 'spring',\r\n                    stiffness: 300,\r\n                    damping: 20,\r\n                    delay: level.delay,\r\n                  },\r\n                },\r\n              }}\r\n            />\r\n          ))}\r\n        </svg>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nWifiIcon.displayName = 'WifiIcon';\r\n\r\nexport { WifiIcon };\r\n",
      "type": "registry:ui"
    }
  ]
}