{
  "name": "circle-dashed",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "circle-dashed.tsx",
      "content": "'use client';\r\n\r\nimport type { Variants } from 'motion/react';\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface CircleDashedIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface CircleDashedIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst pathVariants: Variants = {\r\n  normal: { opacity: 1 },\r\n  animate: (i: number) => ({\r\n    opacity: [0, 1],\r\n    transition: { delay: i * 0.1, duration: 0.3 },\r\n  }),\r\n};\r\n\r\nconst CircleDashedIcon = forwardRef<\r\n  CircleDashedIconHandle,\r\n  CircleDashedIconProps\r\n>(({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n  const controls = useAnimation();\r\n  const isControlledRef = useRef(false);\r\n\r\n  useImperativeHandle(ref, () => {\r\n    isControlledRef.current = true;\r\n\r\n    return {\r\n      startAnimation: () => controls.start('animate'),\r\n      stopAnimation: () => controls.start('normal'),\r\n    };\r\n  });\r\n\r\n  const handleMouseEnter = useCallback(\r\n    (e: React.MouseEvent<HTMLDivElement>) => {\r\n      if (!isControlledRef.current) {\r\n        controls.start('animate');\r\n      } else {\r\n        onMouseEnter?.(e);\r\n      }\r\n    },\r\n    [controls, onMouseEnter]\r\n  );\r\n\r\n  const handleMouseLeave = useCallback(\r\n    (e: React.MouseEvent<HTMLDivElement>) => {\r\n      if (!isControlledRef.current) {\r\n        controls.start('normal');\r\n      } else {\r\n        onMouseLeave?.(e);\r\n      }\r\n    },\r\n    [controls, onMouseLeave]\r\n  );\r\n\r\n  return (\r\n    <div\r\n      className={cn(className)}\r\n      onMouseEnter={handleMouseEnter}\r\n      onMouseLeave={handleMouseLeave}\r\n      {...props}\r\n    >\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        width={size}\r\n        height={size}\r\n        viewBox=\"0 0 24 24\"\r\n        fill=\"none\"\r\n        stroke=\"currentColor\"\r\n        strokeWidth=\"2\"\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n      >\r\n        {[\r\n          'M10.1 2.182a10 10 0 0 1 3.8 0',\r\n          'M13.9 21.818a10 10 0 0 1-3.8 0',\r\n          'M17.609 3.721a10 10 0 0 1 2.69 2.7',\r\n          'M2.182 13.9a10 10 0 0 1 0-3.8',\r\n          'M20.279 17.609a10 10 0 0 1-2.7 2.69',\r\n          'M21.818 10.1a10 10 0 0 1 0 3.8',\r\n          'M3.721 6.391a10 10 0 0 1 2.7-2.69',\r\n          'M6.391 20.279a10 10 0 0 1-2.69-2.7',\r\n        ].map((d, index) => (\r\n          <motion.path\r\n            key={d}\r\n            d={d}\r\n            animate={controls}\r\n            variants={pathVariants}\r\n            custom={index + 1}\r\n          />\r\n        ))}\r\n      </svg>\r\n    </div>\r\n  );\r\n});\r\n\r\nCircleDashedIcon.displayName = 'CircleDashedIcon';\r\n\r\nexport { CircleDashedIcon };\r\n",
      "type": "registry:ui"
    }
  ]
}