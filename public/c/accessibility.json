{
  "name": "accessibility",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "accessibility.tsx",
      "content": "'use client';\n\nimport type { Variants } from 'motion/react';\nimport { motion, useAnimation } from 'motion/react';\nimport type { HTMLAttributes } from 'react';\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface AccessibilityIconHandle {\n  startAnimation: () => void;\n  stopAnimation: () => void;\n}\n\ninterface AccessibilityIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number;\n}\n\nconst CIRCLE_VARIANTS: Variants = {\n  initial: {\n    y: 0,\n    x: 0,\n  },\n  animate: {\n    y: [0, 1, -1, 0],\n    x: [0, 1, -1, 0],\n    transition: {\n      duration: 0.8,\n      ease: 'easeInOut',\n    },\n  },\n};\n\nconst PRIMARY_GROUP_VARIANTS: Variants = {\n  initial: {\n    rotate: 0,\n  },\n  animate: {\n    rotate: [0, 5, -5, 0],\n    transition: {\n      duration: 0.8,\n      ease: 'easeInOut',\n    },\n  },\n};\n\nconst SECONDARY_GROUP_VARIANTS: Variants = {\n  initial: {\n    rotate: 0,\n  },\n  animate: {\n    rotate: -360,\n    transition: {\n      duration: 1,\n      delay: 0.4,\n      ease: 'easeInOut',\n    },\n  },\n};\n\nconst PATH_VARIANTS: Variants = {\n  initial: {\n    rotate: 0,\n    d: 'M8 5 L5 8',\n  },\n  animate: {\n    rotate: [0, -60, 0],\n    d: ['M8 5 L5 8', 'M8 5 L4 9', 'M8 5 L5 8'],\n    transition: {\n      duration: 0.4,\n      delay: 0.2,\n      ease: 'easeInOut',\n    },\n    transformOrigin: 'top right',\n  },\n};\n\nconst AccessibilityIcon = forwardRef<\n  AccessibilityIconHandle,\n  AccessibilityIconProps\n>(({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n  const controls = useAnimation();\n  const isControlledRef = useRef(false);\n\n  useImperativeHandle(ref, () => {\n    isControlledRef.current = true;\n\n    return {\n      startAnimation: () => controls.start('animate'),\n      stopAnimation: () => controls.start('initial'),\n    };\n  });\n\n  const handleMouseEnter = useCallback(\n    (e: React.MouseEvent<HTMLDivElement>) => {\n      if (!isControlledRef.current) {\n        controls.start('animate');\n      } else {\n        onMouseEnter?.(e);\n      }\n    },\n    [controls, onMouseEnter]\n  );\n\n  const handleMouseLeave = useCallback(\n    (e: React.MouseEvent<HTMLDivElement>) => {\n      if (!isControlledRef.current) {\n        controls.start('normal');\n      } else {\n        onMouseLeave?.(e);\n      }\n    },\n    [controls, onMouseLeave]\n  );\n\n  return (\n    <div\n      className={cn(className)}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      {...props}\n    >\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width={size}\n        height={size}\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeWidth=\"2\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      >\n        <motion.circle\n          cx=\"16\"\n          cy=\"4\"\n          r=\"1\"\n          variants={CIRCLE_VARIANTS}\n          initial=\"initial\"\n          animate={controls}\n        />\n        <motion.g\n          variants={PRIMARY_GROUP_VARIANTS}\n          initial=\"initial\"\n          animate={controls}\n        >\n          <path d=\"m18 19 1-7-6 1\" />\n          <path d=\"M8,5l5.5,3-2.4,3.5\" />\n          <motion.path\n            d=\"M8 5 L5 8\"\n            variants={PATH_VARIANTS}\n            initial=\"initial\"\n            animate={controls}\n          />\n        </motion.g>\n        <motion.g\n          variants={SECONDARY_GROUP_VARIANTS}\n          initial=\"initial\"\n          animate={controls}\n        >\n          <path d=\"M4.2,14.5c-.8,2.6.7,5.4,3.3,6.2,1.2.4,2.4.3,3.6-.2\" />\n          <path d=\"M13.8,17.5c.8-2.6-.7-5.4-3.3-6.2-1.2-.4-2.4-.3-3.6.2\" />\n          <path d=\"M13,13.1c-.5-.7-1.1-1.2-1.9-1.6\" />\n        </motion.g>\n      </svg>\n    </div>\n  );\n});\n\nAccessibilityIcon.displayName = 'AccessibilityIcon';\n\nexport { AccessibilityIcon };\n",
      "type": "registry:ui"
    }
  ]
}