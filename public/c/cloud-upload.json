{
  "name": "cloud-upload",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "cloud-upload.tsx",
      "content": "'use client';\n\nimport type { Variants } from 'motion/react';\nimport { motion, useAnimation } from 'motion/react';\nimport type { HTMLAttributes } from 'react';\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface CloudUploadIconHandle {\n  startAnimation: () => void;\n  stopAnimation: () => void;\n}\n\ninterface CloudUploadIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number;\n}\n\nconst CLOUD_VARIANTS: Variants = {\n  initial: { y: -2 },\n  active: { y: 0 },\n};\n\nconst CloudUploadIcon = forwardRef<CloudUploadIconHandle, CloudUploadIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation();\n    const isControlledRef = useRef(false);\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true;\n      return {\n        startAnimation: () => controls.start('initial'),\n        stopAnimation: () => controls.start('active'),\n      };\n    });\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('initial');\n        } else {\n          onMouseEnter?.(e);\n        }\n      },\n      [controls, onMouseEnter]\n    );\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('active');\n        } else {\n          onMouseLeave?.(e);\n        }\n      },\n      [controls, onMouseLeave]\n    );\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        >\n          <path d=\"M4.2 15.1A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.2\" />\n          <motion.g\n            animate={controls}\n            variants={CLOUD_VARIANTS}\n            transition={{\n              duration: 0.3,\n              ease: [0.68, -0.6, 0.32, 1.6],\n            }}\n          >\n            <path d=\"M12 13v8\" />\n            <path d=\"m8 17 4-4 4 4\" />\n          </motion.g>\n        </svg>\n      </div>\n    );\n  }\n);\n\nCloudUploadIcon.displayName = 'CloudUploadIcon';\n\nexport { CloudUploadIcon };\n",
      "type": "registry:ui"
    }
  ]
}