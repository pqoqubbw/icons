{
  "name": "grip-horizontal",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "grip-horizontal.tsx",
      "content": "'use client';\r\n\r\nimport { AnimatePresence, motion, useAnimation } from 'motion/react';\r\nimport { useEffect, useState } from 'react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface GripHorizontalIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface GripHorizontalIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst CIRCLES = [\r\n  { cx: 5, cy: 9 }, // Top left\r\n  { cx: 12, cy: 9 }, // Top middle\r\n  { cx: 19, cy: 9 }, // Top right\r\n  { cx: 5, cy: 15 }, // Bottom left\r\n  { cx: 12, cy: 15 }, // Bottom middle\r\n  { cx: 19, cy: 15 }, // Bottom right\r\n];\r\n\r\nconst GripHorizontalIcon = forwardRef<\r\n  GripHorizontalIconHandle,\r\n  GripHorizontalIconProps\r\n>(({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n  const [isHovered, setIsHovered] = useState(false);\r\n  const controls = useAnimation();\r\n  const isControlledRef = useRef(false);\r\n\r\n  useImperativeHandle(ref, () => {\r\n    isControlledRef.current = true;\r\n\r\n    return {\r\n      startAnimation: async () => setIsHovered(true),\r\n      stopAnimation: () => setIsHovered(false),\r\n    };\r\n  });\r\n\r\n  const handleMouseEnter = useCallback(\r\n    (e: React.MouseEvent<HTMLDivElement>) => {\r\n      if (!isControlledRef.current) {\r\n        setIsHovered(true);\r\n      } else {\r\n        onMouseEnter?.(e);\r\n      }\r\n    },\r\n    [onMouseEnter]\r\n  );\r\n\r\n  const handleMouseLeave = useCallback(\r\n    (e: React.MouseEvent<HTMLDivElement>) => {\r\n      if (!isControlledRef.current) {\r\n        setIsHovered(false);\r\n      } else {\r\n        onMouseLeave?.(e);\r\n      }\r\n    },\r\n    [onMouseLeave]\r\n  );\r\n\r\n  useEffect(() => {\r\n    const animateCircles = async () => {\r\n      if (isHovered) {\r\n        await controls.start((i) => ({\r\n          opacity: 0.3,\r\n          transition: {\r\n            delay: i * 0.1,\r\n            duration: 0.2,\r\n          },\r\n        }));\r\n        await controls.start((i) => ({\r\n          opacity: 1,\r\n          transition: {\r\n            delay: i * 0.1,\r\n            duration: 0.2,\r\n          },\r\n        }));\r\n      }\r\n    };\r\n\r\n    animateCircles();\r\n  }, [isHovered, controls]);\r\n\r\n  return (\r\n    <div\r\n      className={cn(className)}\r\n      onMouseEnter={handleMouseEnter}\r\n      onMouseLeave={handleMouseLeave}\r\n      {...props}\r\n    >\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        width={size}\r\n        height={size}\r\n        viewBox=\"0 0 24 24\"\r\n        fill=\"none\"\r\n        stroke=\"currentColor\"\r\n        strokeWidth=\"2\"\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n      >\r\n        <AnimatePresence>\r\n          {CIRCLES.map((circle, index) => (\r\n            <motion.circle\r\n              key={`${circle.cx}-${circle.cy}`}\r\n              cx={circle.cx}\r\n              cy={circle.cy}\r\n              r=\"1\"\r\n              initial=\"initial\"\r\n              variants={{\r\n                initial: {\r\n                  opacity: 1,\r\n                },\r\n              }}\r\n              animate={controls}\r\n              exit=\"initial\"\r\n              custom={index}\r\n            />\r\n          ))}\r\n        </AnimatePresence>\r\n      </svg>\r\n    </div>\r\n  );\r\n});\r\n\r\nGripHorizontalIcon.displayName = 'GripHorizontalIcon';\r\n\r\nexport { GripHorizontalIcon };\r\n",
      "type": "registry:ui"
    }
  ]
}