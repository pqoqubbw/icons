{
  "name": "battery-full",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "battery-full.tsx",
      "content": "'use client';\n\nimport { type Variants, motion, useAnimation } from 'motion/react';\nimport type { HTMLAttributes } from 'react';\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface BatteryFullIconHandle {\n  startAnimation: () => void;\n  stopAnimation: () => void;\n}\n\ninterface BatteryFullIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number;\n}\n\nconst lineVariants: Variants = {\n  initial: { opacity: 1 },\n  fadeOut: {\n    opacity: 0,\n    transition: {\n      duration: 0.4,\n      ease: 'easeInOut',\n    },\n  },\n  fadeIn: (i: number) => ({\n    opacity: 1,\n    transition: {\n      duration: 0.6,\n      delay: i * 0.4,\n      ease: 'easeInOut',\n    },\n  }),\n};\n\nconst BatteryFullIcon = forwardRef<BatteryFullIconHandle, BatteryFullIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation();\n    const isControlledRef = useRef(false);\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true;\n\n      return {\n        startAnimation: async () => {\n          await controls.start('fadeOut');\n          controls.start('fadeIn');\n        },\n        stopAnimation: () => controls.start('initial'),\n      };\n    });\n\n    const handleMouseEnter = useCallback(\n      async (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          await controls.start('fadeOut');\n          controls.start('fadeIn');\n        } else {\n          onMouseEnter?.(e);\n        }\n      },\n      [controls, onMouseEnter]\n    );\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('initial');\n        } else {\n          onMouseLeave?.(e);\n        }\n      },\n      [controls, onMouseLeave]\n    );\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <motion.svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        >\n          <rect width=\"16\" height=\"10\" x=\"2\" y=\"7\" rx=\"2\" ry=\"2\" />\n          <line x1=\"22\" x2=\"22\" y1=\"11\" y2=\"13\" />\n          <motion.line\n            x1=\"6\"\n            x2=\"6\"\n            y1=\"11\"\n            y2=\"13\"\n            variants={lineVariants}\n            initial=\"initial\"\n            animate={controls}\n            custom={0}\n          />\n          <motion.line\n            x1=\"10\"\n            x2=\"10\"\n            y1=\"11\"\n            y2=\"13\"\n            variants={lineVariants}\n            initial=\"initial\"\n            animate={controls}\n            custom={1}\n          />\n          <motion.line\n            x1=\"14\"\n            x2=\"14\"\n            y1=\"11\"\n            y2=\"13\"\n            variants={lineVariants}\n            initial=\"initial\"\n            animate={controls}\n            custom={2}\n          />\n        </motion.svg>\n      </div>\n    );\n  }\n);\n\nBatteryFullIcon.displayName = 'BatteryFullIcon';\n\nexport { BatteryFullIcon };\n",
      "type": "registry:ui"
    }
  ]
}