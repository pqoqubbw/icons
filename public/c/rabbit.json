{
  "name": "rabbit",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "rabbit.tsx",
      "content": "'use client';\r\n\r\nimport type { Transition, Variants } from 'motion/react';\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface RabbitIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface RabbitIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst transition: Transition = {\r\n  duration: 0.6,\r\n  ease: [0.42, 0, 0.58, 1],\r\n};\r\n\r\nconst speedVariants: Variants = {\r\n  normal: {\r\n    rotate: 0,\r\n    x: 0,\r\n    y: 0,\r\n  },\r\n  animate: {\r\n    rotate: [0, 5, -5, 3, -3, 0],\r\n    x: [0, 3, -3, 2, -2, 0],\r\n    y: [0, 1.5, -1.5, 1, -1, 0],\r\n    transition,\r\n  },\r\n};\r\n\r\nconst RabbitIcon = forwardRef<RabbitIconHandle, RabbitIconProps>(\r\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n    const controls = useAnimation();\r\n    const isControlledRef = useRef(false);\r\n\r\n    useImperativeHandle(ref, () => {\r\n      isControlledRef.current = true;\r\n\r\n      return {\r\n        startAnimation: () => controls.start('animate'),\r\n        stopAnimation: () => controls.start('normal'),\r\n      };\r\n    });\r\n\r\n    const handleMouseEnter = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('animate');\r\n        } else {\r\n          onMouseEnter?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseEnter]\r\n    );\r\n\r\n    const handleMouseLeave = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('normal');\r\n        } else {\r\n          onMouseLeave?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseLeave]\r\n    );\r\n\r\n    return (\r\n      <div\r\n        className={cn(className)}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        {...props}\r\n      >\r\n        <motion.svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={size}\r\n          height={size}\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          variants={speedVariants}\r\n          animate={controls}\r\n        >\r\n          <path d=\"M18 21h-8a4 4 0 0 1-4-4 7 7 0 0 1 7-7h.2L9.6 6.4a1 1 0 1 1 2.8-2.8L15.8 7h.2c3.3 0 6 2.7 6 6v1a2 2 0 0 1-2 2h-1a3 3 0 0 0-3 3\" />\r\n          <path d=\"M13 16a3 3 0 0 1 2.24 5\" />\r\n          <path d=\"M18 12h.01\" />\r\n          <path d=\"M20 8.54V4a2 2 0 1 0-4 0v3\" />\r\n          <path d=\"M7.612 12.524a3 3 0 1 0-1.6 4.3\" />\r\n        </motion.svg>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nRabbitIcon.displayName = 'RabbitIcon';\r\n\r\nexport { RabbitIcon };\r\n",
      "type": "registry:ui"
    }
  ]
}