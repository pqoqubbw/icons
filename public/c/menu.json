{
  "name": "menu",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "menu.tsx",
      "content": "'use client';\n\nimport type { Variants } from 'motion/react';\nimport { motion, useAnimation } from 'motion/react';\nimport type { HTMLAttributes } from 'react';\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface MenuIconHandle {\n  startAnimation: () => void;\n  stopAnimation: () => void;\n}\n\ninterface MenuIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number;\n}\n\nconst lineVariants: Variants = {\n  normal: {\n    rotate: 0,\n    y: 0,\n    opacity: 1,\n  },\n  animate: (custom: number) => ({\n    rotate: custom === 1 ? 45 : custom === 3 ? -45 : 0,\n    y: custom === 1 ? 6 : custom === 3 ? -6 : 0,\n    opacity: custom === 2 ? 0 : 1,\n    transition: {\n      type: 'spring',\n      stiffness: 260,\n      damping: 20,\n    },\n  }),\n};\n\nconst MenuIcon = forwardRef<MenuIconHandle, MenuIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation();\n    const isControlledRef = useRef(false);\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true;\n\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      };\n    });\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('animate');\n        } else {\n          onMouseEnter?.(e);\n        }\n      },\n      [controls, onMouseEnter]\n    );\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal');\n        } else {\n          onMouseLeave?.(e);\n        }\n      },\n      [controls, onMouseLeave]\n    );\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        >\n          <motion.line\n            x1=\"4\"\n            y1=\"6\"\n            x2=\"20\"\n            y2=\"6\"\n            variants={lineVariants}\n            animate={controls}\n            custom={1}\n          />\n          <motion.line\n            x1=\"4\"\n            y1=\"12\"\n            x2=\"20\"\n            y2=\"12\"\n            variants={lineVariants}\n            animate={controls}\n            custom={2}\n          />\n          <motion.line\n            x1=\"4\"\n            y1=\"18\"\n            x2=\"20\"\n            y2=\"18\"\n            variants={lineVariants}\n            animate={controls}\n            custom={3}\n          />\n        </svg>\n      </div>\n    );\n  }\n);\n\nMenuIcon.displayName = 'MenuIcon';\n\nexport { MenuIcon };\n",
      "type": "registry:ui"
    }
  ]
}