{
  "name": "map-pin-check",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "map-pin-check.tsx",
      "content": "'use client';\r\n\r\nimport type { Variants } from 'motion/react';\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface MapPinCheckIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface MapPinCheckIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst svgVariants: Variants = {\r\n  normal: {\r\n    y: 0,\r\n  },\r\n  animate: {\r\n    y: [0, -5, -3],\r\n    transition: {\r\n      duration: 0.5,\r\n      times: [0, 0.6, 1],\r\n    },\r\n  },\r\n};\r\n\r\nconst checkVariants: Variants = {\r\n  normal: {\r\n    opacity: 1,\r\n  },\r\n  animate: {\r\n    opacity: [0, 1],\r\n    pathLength: [0, 1],\r\n    transition: {\r\n      delay: 0.3,\r\n      duration: 0.3,\r\n      opacity: { duration: 0.1, delay: 0.3 },\r\n    },\r\n  },\r\n};\r\n\r\nconst MapPinCheckIcon = forwardRef<MapPinCheckIconHandle, MapPinCheckIconProps>(\r\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n    const controls = useAnimation();\r\n    const isControlledRef = useRef(false);\r\n\r\n    useImperativeHandle(ref, () => {\r\n      isControlledRef.current = true;\r\n\r\n      return {\r\n        startAnimation: () => controls.start('animate'),\r\n        stopAnimation: () => controls.start('normal'),\r\n      };\r\n    });\r\n\r\n    const handleMouseEnter = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('animate');\r\n        } else {\r\n          onMouseEnter?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseEnter]\r\n    );\r\n\r\n    const handleMouseLeave = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('normal');\r\n        } else {\r\n          onMouseLeave?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseLeave]\r\n    );\r\n\r\n    return (\r\n      <div\r\n        className={cn(className)}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        {...props}\r\n      >\r\n        <motion.svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={size}\r\n          height={size}\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          variants={svgVariants}\r\n          initial=\"normal\"\r\n          animate={controls}\r\n        >\r\n          <path d=\"M19.43 12.935c.357-.967.57-1.955.57-2.935a8 8 0 0 0-16 0c0 4.993 5.539 10.193 7.399 11.799a1 1 0 0 0 1.202 0 32.197 32.197 0 0 0 .813-.728\" />\r\n          <circle cx=\"12\" cy=\"10\" r=\"3\" />\r\n          <motion.path\r\n            d=\"m16 18 2 2 4-4\"\r\n            variants={checkVariants}\r\n            initial=\"normal\"\r\n            animate={controls}\r\n          />\r\n        </motion.svg>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nMapPinCheckIcon.displayName = 'MapPinCheckIcon';\r\n\r\nexport { MapPinCheckIcon };\r\n",
      "type": "registry:ui"
    }
  ]
}