{
  "name": "crown",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "crown.tsx",
      "content": "'use client';\n\nimport { motion, useAnimation } from 'motion/react';\nimport type { HTMLAttributes } from 'react';\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface CrownIconHandle {\n  startAnimation: () => void;\n  stopAnimation: () => void;\n}\n\ninterface CrownIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number;\n}\n\nconst CrownIcon = forwardRef<CrownIconHandle, CrownIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation();\n    const isControlledRef = useRef(false);\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true;\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      };\n    });\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('animate');\n        } else {\n          onMouseEnter?.(e);\n        }\n      },\n      [controls, onMouseEnter]\n    );\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal');\n        } else {\n          onMouseLeave?.(e);\n        }\n      },\n      [controls, onMouseLeave]\n    );\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <motion.svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          animate={controls}\n          variants={{\n            normal: { y: 0 },\n            animate: { y: [0, -3, 0] },\n          }}\n          transition={{\n            duration: 0.6,\n            ease: [0.4, 0, 0.2, 1],\n          }}\n        >\n          <motion.path\n            d=\"M11.562 3.266a.5.5 0 0 1 .876 0L15.39 8.87a1 1 0 0 0 1.516.294L21.183 5.5a.5.5 0 0 1 .798.519l-2.834 10.246a1 1 0 0 1-.956.734H5.81a1 1 0 0 1-.957-.734L2.02 6.02a.5.5 0 0 1 .798-.519l4.276 3.664a1 1 0 0 0 1.516-.294z\"\n            variants={{\n              normal: { pathLength: 1, opacity: 1 },\n              animate: { pathLength: [0, 1], opacity: [0, 1] },\n            }}\n            transition={{\n              duration: 0.8,\n              ease: 'easeOut',\n            }}\n          />\n          <motion.path\n            d=\"M5 21h14\"\n            variants={{\n              normal: { pathLength: 1 },\n              animate: { pathLength: [0, 1] },\n            }}\n            transition={{\n              delay: 0.3,\n              duration: 0.4,\n            }}\n          />\n        </motion.svg>\n      </div>\n    );\n  }\n);\n\nCrownIcon.displayName = 'CrownIcon';\n\nexport { CrownIcon };\n",
      "type": "registry:ui"
    }
  ]
}