{
  "name": "sunset",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "sunset.tsx",
      "content": "'use client';\r\n\r\nimport type { Variants } from 'motion/react';\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface SunsetIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface SunsetIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst arrowVariants: Variants = {\r\n  normal: {\r\n    y: 0,\r\n  },\r\n  animate: {\r\n    y: [0, 1, 0],\r\n  },\r\n};\r\nconst raysVariants: Variants = {\r\n  normal: { opacity: 1 },\r\n  animate: (i: number) => ({\r\n    opacity: [0, 1],\r\n    transition: { delay: i * 0.1, duration: 0.3 },\r\n  }),\r\n};\r\n\r\nconst SunsetIcon = forwardRef<SunsetIconHandle, SunsetIconProps>(\r\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n    const arrowControls = useAnimation();\r\n    const raysControls = useAnimation();\r\n    const isControlledRef = useRef(false);\r\n\r\n    useImperativeHandle(ref, () => {\r\n      isControlledRef.current = true;\r\n\r\n      return {\r\n        startAnimation: () => {\r\n          arrowControls.start('animate');\r\n          raysControls.start('animate');\r\n        },\r\n        stopAnimation: () => {\r\n          arrowControls.start('normal');\r\n          raysControls.start('normal');\r\n        },\r\n      };\r\n    });\r\n\r\n    const handleMouseEnter = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          arrowControls.start('animate');\r\n          raysControls.start('animate');\r\n        } else {\r\n          onMouseEnter?.(e);\r\n        }\r\n      },\r\n      [arrowControls, raysControls, onMouseEnter]\r\n    );\r\n\r\n    const handleMouseLeave = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          arrowControls.start('normal');\r\n          raysControls.start('normal');\r\n        } else {\r\n          onMouseLeave?.(e);\r\n        }\r\n      },\r\n      [arrowControls, raysControls, onMouseLeave]\r\n    );\r\n\r\n    return (\r\n      <div\r\n        className={cn(className)}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        {...props}\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={size}\r\n          height={size}\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n        >\r\n          <motion.g\r\n            animate={arrowControls}\r\n            initial=\"normal\"\r\n            variants={arrowVariants}\r\n          >\r\n            <path d=\"M12 10V2\" />\r\n            <path d=\"m16 6-4 4-4-4\" />\r\n          </motion.g>\r\n\r\n          {[\r\n            'm4.93 10.93 1.41 1.41',\r\n            'M2 18h2',\r\n            'M20 18h2',\r\n            'm19.07 10.93-1.41 1.41',\r\n            'M22 22H2',\r\n            ,\r\n          ].map((d, index) => (\r\n            <motion.path\r\n              key={d}\r\n              d={d}\r\n              animate={raysControls}\r\n              variants={raysVariants}\r\n              custom={index + 1}\r\n              initial=\"normal\"\r\n            />\r\n          ))}\r\n          <path d=\"M16 18a4 4 0 0 0-8 0\" />\r\n        </svg>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nSunsetIcon.displayName = 'SunsetIcon';\r\n\r\nexport { SunsetIcon };\r\n",
      "type": "registry:ui"
    }
  ]
}