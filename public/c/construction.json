{
  "name": "construction",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "construction.tsx",
      "content": "'use client';\n\nimport { motion, useAnimation } from 'motion/react';\nimport type { HTMLAttributes } from 'react';\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface ConstructionIconHandle {\n  startAnimation: () => void;\n  stopAnimation: () => void;\n}\n\ninterface ConstructionIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number;\n}\n\nconst ConstructionIcon = forwardRef<\n  ConstructionIconHandle,\n  ConstructionIconProps\n>(({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n  const controls = useAnimation();\n  const isControlledRef = useRef(false);\n\n  useImperativeHandle(ref, () => {\n    isControlledRef.current = true;\n    return {\n      startAnimation: () => controls.start('animate'),\n      stopAnimation: () => controls.start('normal'),\n    };\n  });\n\n  const handleMouseEnter = useCallback(\n    (e: React.MouseEvent<HTMLDivElement>) => {\n      if (!isControlledRef.current) {\n        controls.start('animate');\n      } else {\n        onMouseEnter?.(e);\n      }\n    },\n    [controls, onMouseEnter]\n  );\n\n  const handleMouseLeave = useCallback(\n    (e: React.MouseEvent<HTMLDivElement>) => {\n      if (!isControlledRef.current) {\n        controls.start('normal');\n      } else {\n        onMouseLeave?.(e);\n      }\n    },\n    [controls, onMouseLeave]\n  );\n\n  return (\n    <div\n      className={cn(className)}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      {...props}\n    >\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width={size}\n        height={size}\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeWidth=\"2\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      >\n        <defs>\n          <motion.pattern\n            id=\"stripes\"\n            patternUnits=\"userSpaceOnUse\"\n            width=\"6\"\n            height=\"14\"\n            variants={{\n              normal: {\n                x: 0,\n              },\n              animate: {\n                x: [0, 6],\n                transition: {\n                  duration: 1,\n                  ease: 'linear',\n                  repeat: Infinity,\n                  repeatType: 'loop',\n                },\n              },\n            }}\n            animate={controls}\n            initial=\"normal\"\n          >\n            <path d=\"M-4 -2 L14 30\" stroke=\"currentColor\" strokeWidth=\"2\" />\n          </motion.pattern>\n        </defs>\n        <rect x=\"2\" y=\"6\" width=\"20\" height=\"8\" rx=\"1\" fill=\"url(#stripes)\" />\n        <path d=\"M17 14v7\" />\n        <path d=\"M7 14v7\" />\n        <path d=\"M17 3v3\" />\n        <path d=\"M7 3v3\" />\n      </svg>\n    </div>\n  );\n});\n\nConstructionIcon.displayName = 'ConstructionIcon';\n\nexport { ConstructionIcon };\n",
      "type": "registry:ui"
    }
  ]
}