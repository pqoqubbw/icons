{
  "name": "arrow-big-left-dash",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "arrow-big-left-dash.tsx",
      "content": "'use client';\n\nimport type { Variants } from 'motion/react';\nimport { motion, useAnimation } from 'motion/react';\nimport type { HTMLAttributes } from 'react';\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface ArrowBigLeftDashIconHandle {\n  startAnimation: () => void;\n  stopAnimation: () => void;\n}\n\ninterface ArrowBigLeftDashIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number;\n}\n\nconst dashVariants: Variants = {\n  normal: { translateX: 0 },\n  animate: {\n    translateX: [0, -1, 0],\n    transition: {\n      duration: 0.4,\n    },\n  },\n};\n\nconst arrowVariants: Variants = {\n  normal: { translateX: 0 },\n  animate: {\n    translateX: [0, -3, 0],\n    transition: {\n      duration: 0.4,\n    },\n  },\n};\n\nconst ArrowBigLeftDashIcon = forwardRef<\n  ArrowBigLeftDashIconHandle,\n  ArrowBigLeftDashIconProps\n>(({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n  const controls = useAnimation();\n  const isControlledRef = useRef(false);\n\n  useImperativeHandle(ref, () => {\n    isControlledRef.current = true;\n    return {\n      startAnimation: () => controls.start('animate'),\n      stopAnimation: () => controls.start('normal'),\n    };\n  });\n\n  const handleMouseEnter = useCallback(\n    (e: React.MouseEvent<HTMLDivElement>) => {\n      if (!isControlledRef.current) {\n        controls.start('animate');\n      } else {\n        onMouseEnter?.(e);\n      }\n    },\n    [controls, onMouseEnter]\n  );\n\n  const handleMouseLeave = useCallback(\n    (e: React.MouseEvent<HTMLDivElement>) => {\n      if (!isControlledRef.current) {\n        controls.start('normal');\n      } else {\n        onMouseLeave?.(e);\n      }\n    },\n    [controls, onMouseLeave]\n  );\n\n  return (\n    <div\n      className={cn(className)}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      {...props}\n    >\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width={size}\n        height={size}\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeWidth=\"2\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      >\n        <motion.path d=\"M19 15V9\" variants={dashVariants} animate={controls} />\n        <motion.path\n          d=\"M15 15h-3v4l-7-7 7-7v4h3v6z\"\n          variants={arrowVariants}\n          animate={controls}\n        />\n      </svg>\n    </div>\n  );\n});\n\nArrowBigLeftDashIcon.displayName = 'ArrowBigLeftDashIcon';\n\nexport { ArrowBigLeftDashIcon };\n",
      "type": "registry:ui"
    }
  ]
}