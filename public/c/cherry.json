{
  "name": "cherry",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "cherry.tsx",
      "content": "'use client';\r\n\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { Variants } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface CherryIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface CherryIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst variants: Variants = {\r\n  normal: {\r\n    translateX: 0,\r\n    opacity: 1,\r\n    transition: {\r\n      duration: 0.2,\r\n    },\r\n  },\r\n  animate: {\r\n    translateX: [0, -2, 2, -2, 2, 0],\r\n    opacity: 1,\r\n    transition: {\r\n      duration: 0.4,\r\n      times: [0, 0.2, 0.4, 0.6, 0.8, 1],\r\n      ease: 'easeInOut',\r\n    },\r\n  },\r\n};\r\n\r\nconst CherryIcon = forwardRef<CherryIconHandle, CherryIconProps>(\r\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n    const controls = useAnimation();\r\n    const isControlledRef = useRef(false);\r\n\r\n    useImperativeHandle(ref, () => {\r\n      isControlledRef.current = true;\r\n      return {\r\n        startAnimation: () => controls.start('animate'),\r\n        stopAnimation: () => controls.start('normal'),\r\n      };\r\n    });\r\n\r\n    const handleMouseEnter = useCallback(\r\n      (e) => {\r\n        if (!isControlledRef.current) controls.start('animate');\r\n        else onMouseEnter?.(e);\r\n      },\r\n      [controls, onMouseEnter]\r\n    );\r\n\r\n    const handleMouseLeave = useCallback(\r\n      (e) => {\r\n        if (!isControlledRef.current) controls.start('normal');\r\n        else onMouseLeave?.(e);\r\n      },\r\n      [controls, onMouseLeave]\r\n    );\r\n\r\n    return (\r\n      <div\r\n        className={cn(\r\n          `cursor-pointer select-none p-2 hover:bg-accent rounded-md transition-colors duration-200 flex items-center justify-center`,\r\n          className\r\n        )}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        {...props}\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={size}\r\n          height={size}\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n        >\r\n          <motion.path\r\n            variants={variants}\r\n            animate={controls}\r\n            initial=\"normal\"\r\n            d=\"M2 17a5 5 0 0 0 10 0c0-2.76-2.5-5-5-3-2.5-2-5 .24-5 3Z\"\r\n          />\r\n          <motion.path\r\n            variants={variants}\r\n            animate={controls}\r\n            initial=\"normal\"\r\n            d=\"M12 17a5 5 0 0 0 10 0c0-2.76-2.5-5-5-3-2.5-2-5 .24-5 3Z\"\r\n          />\r\n          <motion.path\r\n            variants={variants}\r\n            animate={controls}\r\n            initial=\"normal\"\r\n            d=\"M7 14c3.22-2.91 4.29-8.75 5-12 1.66 2.38 4.94 9 5 12\"\r\n          />\r\n          <motion.path\r\n            variants={variants}\r\n            animate={controls}\r\n            initial=\"normal\"\r\n            d=\"M22 9c-4.29 0-7.14-2.33-10-7 5.71 0 10 4.67 10 7Z\"\r\n          />\r\n        </svg>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nCherryIcon.displayName = 'CherryIcon';\r\n\r\nexport { CherryIcon };",
      "type": "registry:ui"
    }
  ]
}