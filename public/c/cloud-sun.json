{
  "name": "cloud-sun",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "cloud-sun.tsx",
      "content": "'use client';\n\nimport type { Variants } from 'motion/react';\nimport { motion, useAnimation } from 'motion/react';\nimport type { HTMLAttributes } from 'react';\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface CloudSunIconHandle {\n  startAnimation: () => void;\n  stopAnimation: () => void;\n}\n\ninterface CloudSunIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number;\n}\n\nconst cloudVariants: Variants = {\n  normal: {\n    x: 0,\n    y: 0,\n  },\n  animate: {\n    x: [-1, 1, -1, 1, 0],\n    y: [-1, 1, -1, 1, 0],\n    transition: {\n      duration: 1,\n      ease: 'easeInOut',\n    },\n  },\n};\n\nconst sunVariants: Variants = {\n  normal: { opacity: 1 },\n  animate: (i: number) => ({\n    opacity: [0, 1],\n    transition: { delay: i * 0.1, duration: 0.3 },\n  }),\n};\n\nconst CloudSunIcon = forwardRef<CloudSunIconHandle, CloudSunIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const cloudControls = useAnimation();\n    const sunControls = useAnimation();\n    const isControlledRef = useRef(false);\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true;\n\n      return {\n        startAnimation: () => {\n          cloudControls.start('animate');\n          sunControls.start('animate');\n        },\n        stopAnimation: () => {\n          cloudControls.start('normal');\n          sunControls.start('normal');\n        },\n      };\n    });\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          cloudControls.start('animate');\n          sunControls.start('animate');\n        } else {\n          onMouseEnter?.(e);\n        }\n      },\n      [cloudControls, sunControls, onMouseEnter]\n    );\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          cloudControls.start('normal');\n          sunControls.start('normal');\n        } else {\n          onMouseLeave?.(e);\n        }\n      },\n      [cloudControls, sunControls, onMouseLeave]\n    );\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          style={{ overflow: 'visible' }}\n        >\n          <motion.g\n            variants={cloudVariants}\n            animate={cloudControls}\n            initial=\"normal\"\n          >\n            <path d=\"M13 22H7a5 5 0 1 1 4.9-6H13a3 3 0 0 1 0 6Z\" />\n          </motion.g>\n          {[\n            'M12 2v2',\n            'm4.93 4.93 1.41 1.41',\n            'M20 12h2',\n            'm19.07 4.93-1.41 1.41',\n            'M15.947 12.65a4 4 0 0 0-5.925-4.128',\n          ].map((d, index) => (\n            <motion.path\n              key={d}\n              d={d}\n              animate={sunControls}\n              variants={sunVariants}\n              custom={index + 1}\n              initial=\"normal\"\n            />\n          ))}\n        </svg>\n      </div>\n    );\n  }\n);\n\nCloudSunIcon.displayName = 'CloudSunIcon';\n\nexport { CloudSunIcon };\n",
      "type": "registry:ui"
    }
  ]
}