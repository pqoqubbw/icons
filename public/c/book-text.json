{
  "name": "book-text",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "book-text.tsx",
      "content": "'use client';\n\nimport { motion, useAnimation } from 'motion/react';\nimport type { HTMLAttributes } from 'react';\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface BookTextIconHandle {\n  startAnimation: () => void;\n  stopAnimation: () => void;\n}\n\ninterface BookTextIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number;\n}\n\nconst BookTextIcon = forwardRef<BookTextIconHandle, BookTextIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation();\n    const isControlledRef = useRef(false);\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true;\n\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      };\n    });\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('animate');\n        } else {\n          onMouseEnter?.(e);\n        }\n      },\n      [controls, onMouseEnter]\n    );\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal');\n        } else {\n          onMouseLeave?.(e);\n        }\n      },\n      [controls, onMouseLeave]\n    );\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <motion.svg\n          animate={controls}\n          variants={{\n            animate: {\n              scale: [1, 1.04, 1],\n              rotate: [0, -8, 8, -8, 0],\n              y: [0, -2, 0],\n              transition: {\n                duration: 0.6,\n                ease: 'easeInOut',\n                times: [0, 0.2, 0.5, 0.8, 1],\n              },\n            },\n            normal: {\n              scale: 1,\n              rotate: 0,\n              y: 0,\n            },\n          }}\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        >\n          <path d=\"M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20\" />\n          <path d=\"M8 11h8\" />\n          <path d=\"M8 7h6\" />\n        </motion.svg>\n      </div>\n    );\n  }\n);\n\nBookTextIcon.displayName = 'BookTextIcon';\n\nexport { BookTextIcon };\n",
      "type": "registry:ui"
    }
  ]
}