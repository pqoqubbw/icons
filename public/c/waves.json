{
  "name": "waves",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "waves.tsx",
      "content": "'use client';\n\nimport { motion, useAnimation } from 'motion/react';\nimport type { HTMLAttributes } from 'react';\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface WavesIconHandle {\n  startAnimation: () => void;\n  stopAnimation: () => void;\n}\n\ninterface WavesIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number;\n}\n\nconst WavesIcon = forwardRef<WavesIconHandle, WavesIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation();\n    const isControlledRef = useRef(false);\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true;\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      };\n    });\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('animate');\n        }\n        onMouseEnter?.(e);\n      },\n      [controls, onMouseEnter]\n    );\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal');\n        }\n        onMouseLeave?.(e);\n      },\n      [controls, onMouseLeave]\n    );\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        >\n          <motion.path\n            d=\"M2 6c.6.5 1.2 1 2.5 1C7 7 7 5 9.5 5c2.6 0 2.4 2 5 2c2.5 0 2.5-2 5-2c1.3 0 1.9.5 2.5 1\"\n            initial={{ pathLength: 1 }}\n            variants={{\n              normal: { pathLength: 1 },\n              animate: {\n                pathLength: [0, 1],\n                transition: { duration: 0.4, ease: 'linear' },\n              },\n            }}\n            animate={controls}\n          />\n          <motion.path\n            d=\"M2 12c.6.5 1.2 1 2.5 1c2.5 0 2.5-2 5-2c2.6 0 2.4 2 5 2c2.5 0 2.5-2 5-2c1.3 0 1.9.5 2.5 1\"\n            initial={{ pathLength: 1 }}\n            variants={{\n              normal: { pathLength: 1 },\n              animate: {\n                pathLength: [0, 1],\n                transition: { duration: 0.4, ease: 'linear' },\n              },\n            }}\n            animate={controls}\n          />\n          <motion.path\n            d=\"M2 18c.6.5 1.2 1 2.5 1c2.5 0 2.5-2 5-2c2.6 0 2.4 2 5 2c2.5 0 2.5-2 5-2c1.3 0 1.9.5 2.5 1\"\n            initial={{ pathLength: 1 }}\n            variants={{\n              normal: { pathLength: 1 },\n              animate: {\n                pathLength: [0, 1],\n                transition: { duration: 0.4, ease: 'linear' },\n              },\n            }}\n            animate={controls}\n          />\n        </svg>\n      </div>\n    );\n  }\n);\n\nWavesIcon.displayName = 'WavesIcon';\nexport { WavesIcon };\n",
      "type": "registry:ui"
    }
  ]
}