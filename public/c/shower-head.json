{
  "name": "shower-head",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "shower-head.tsx",
      "content": "'use client';\n\nimport type { Variants } from 'motion/react';\nimport { motion, useAnimation } from 'motion/react';\nimport type { HTMLAttributes } from 'react';\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface ShowerHeadIconHandle {\n  startAnimation: () => void;\n  stopAnimation: () => void;\n}\n\ninterface ShowerHeadIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number;\n}\n\nconst dropVariants: Variants = {\n  animate: {\n    transition: {\n      staggerChildren: 0.2,\n    },\n  },\n};\n\nconst dropChildVariants: Variants = {\n  normal: {\n    opacity: 1,\n  },\n  animate: {\n    opacity: [1, 0.2, 1],\n    transition: {\n      duration: 1,\n      repeat: Infinity,\n      ease: 'easeInOut',\n    },\n  },\n};\n\nconst dropPath = [\n  { id: 'drop1', d: 'M14 17v.01' },\n  { id: 'drop2', d: 'M10 16v.01' },\n  { id: 'drop3', d: 'M13 13v.01' },\n  { id: 'drop4', d: 'M16 10v.01' },\n  { id: 'drop5', d: 'M11 20v.01' },\n  { id: 'drop6', d: 'M17 14v.01' },\n  { id: 'drop7', d: 'M20 11v.01' },\n];\n\nconst ShowerHeadIcon = forwardRef<ShowerHeadIconHandle, ShowerHeadIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation();\n    const isControlledRef = useRef(false);\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true;\n\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      };\n    });\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('animate');\n        } else {\n          onMouseEnter?.(e);\n        }\n      },\n      [controls, onMouseEnter]\n    );\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal');\n        } else {\n          onMouseLeave?.(e);\n        }\n      },\n      [controls, onMouseLeave]\n    );\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        >\n          <path d=\"m4 4 2.5 2.5\" />\n          <path d=\"M13.5 6.5a4.95 4.95 0 0 0-7 7\" />\n          <path d=\"M15 5 5 15\" />\n          <motion.g variants={dropVariants} animate={controls} initial=\"normal\">\n            {dropPath.map((path) => (\n              <motion.path\n                variants={dropChildVariants}\n                key={path.id}\n                d={path.d}\n              />\n            ))}\n          </motion.g>\n        </svg>\n      </div>\n    );\n  }\n);\n\nShowerHeadIcon.displayName = 'ShowerHeadIcon';\n\nexport { ShowerHeadIcon };\n",
      "type": "registry:ui"
    }
  ]
}