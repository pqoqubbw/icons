{
  "name": "linkedin",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "linkedin.tsx",
      "content": "'use client';\n\nimport { motion, useAnimation } from 'motion/react';\nimport type { Variants } from 'motion/react';\nimport type { HTMLAttributes } from 'react';\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface LinkedinIconHandle {\n  startAnimation: () => void;\n  stopAnimation: () => void;\n}\n\ninterface LinkedinIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number;\n}\n\nconst pathVariants: Variants = {\n  normal: {\n    opacity: 1,\n    pathLength: 1,\n    pathOffset: 0,\n    transition: {\n      duration: 0.4,\n      opacity: { duration: 0.1 },\n    },\n  },\n  animate: {\n    opacity: [0, 1],\n    pathLength: [0, 1],\n    pathOffset: [1, 0],\n    transition: {\n      duration: 0.6,\n      ease: 'linear',\n      opacity: { duration: 0.1 },\n    },\n  },\n};\n\nconst rectVariants: Variants = {\n  normal: {\n    opacity: 1,\n    pathLength: 1,\n    pathOffset: 0,\n    transition: {\n      duration: 0.4,\n      opacity: { duration: 0.1 },\n    },\n  },\n  animate: {\n    opacity: [0, 1],\n    pathLength: [0, 1],\n    pathOffset: [1, 0],\n    transition: {\n      duration: 0.6,\n      ease: 'linear',\n      opacity: { duration: 0.1 },\n    },\n  },\n};\n\nconst circleVariants: Variants = {\n  normal: {\n    opacity: 1,\n    pathLength: 1,\n    pathOffset: 0,\n    transition: {\n      duration: 0.4,\n      opacity: { duration: 0.1 },\n    },\n  },\n  animate: {\n    opacity: [0, 1],\n    pathLength: [0, 1],\n    pathOffset: [1, 0],\n    transition: {\n      duration: 0.6,\n      ease: 'linear',\n      opacity: { duration: 0.1 },\n    },\n  },\n};\n\nconst LinkedinIcon = forwardRef<LinkedinIconHandle, LinkedinIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const pathControls = useAnimation();\n    const rectControls = useAnimation();\n    const circleControls = useAnimation();\n\n    const isControlledRef = useRef(false);\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true;\n\n      return {\n        startAnimation: () => {\n          pathControls.start('animate');\n          rectControls.start('animate');\n          circleControls.start('animate');\n        },\n        stopAnimation: () => {\n          pathControls.start('normal');\n          rectControls.start('normal');\n          circleControls.start('normal');\n        },\n      };\n    });\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          pathControls.start('animate');\n          rectControls.start('animate');\n          circleControls.start('animate');\n        } else {\n          onMouseEnter?.(e);\n        }\n      },\n      [circleControls, onMouseEnter, pathControls, rectControls]\n    );\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          pathControls.start('normal');\n          rectControls.start('normal');\n          circleControls.start('normal');\n        } else {\n          onMouseLeave?.(e);\n        }\n      },\n      [pathControls, rectControls, circleControls, onMouseLeave]\n    );\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          viewBox=\"0 0 24 24\"\n        >\n          <motion.path\n            variants={pathVariants}\n            initial=\"normal\"\n            animate={pathControls}\n            d=\"M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z\"\n          />\n          <motion.rect\n            variants={rectVariants}\n            initial=\"normal\"\n            animate={rectControls}\n            x=\"2\"\n            y=\"9\"\n            width=\"4\"\n            height=\"12\"\n          />\n          <motion.circle\n            variants={circleVariants}\n            initial=\"normal\"\n            animate={circleControls}\n            cx=\"4\"\n            cy=\"4\"\n            r=\"2\"\n          />\n        </svg>\n      </div>\n    );\n  }\n);\n\nLinkedinIcon.displayName = 'LinkedinIcon';\n\nexport { LinkedinIcon };\n",
      "type": "registry:ui"
    }
  ]
}