{
  "name": "chart-scatter",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "chart-scatter.tsx",
      "content": "'use client';\n\nimport { type Variants, motion, useAnimation } from 'motion/react';\nimport type { HTMLAttributes } from 'react';\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface ChartScatterIconHandle {\n  startAnimation: () => void;\n  stopAnimation: () => void;\n}\n\ninterface ChartScatterIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number;\n}\n\nconst dotVariants: Variants = {\n  visible: (i: number) => ({\n    opacity: 1,\n    transition: {\n      delay: i * 0.15,\n      duration: 0.3,\n    },\n  }),\n  hidden: {\n    opacity: 0,\n    transition: {\n      duration: 0.2,\n    },\n  },\n  default: { opacity: 1 },\n};\n\nconst ChartScatterIcon = forwardRef<\n  ChartScatterIconHandle,\n  ChartScatterIconProps\n>(({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n  const controls = useAnimation();\n  const isControlledRef = useRef(false);\n\n  useImperativeHandle(ref, () => {\n    isControlledRef.current = true;\n\n    return {\n      startAnimation: async () => {\n        await controls.start('hidden');\n        await controls.start('visible');\n      },\n      stopAnimation: async () => controls.start('default'),\n    };\n  });\n\n  const handleMouseEnter = useCallback(\n    async (e: React.MouseEvent<HTMLDivElement>) => {\n      if (!isControlledRef.current) {\n        await controls.start('hidden');\n        await controls.start('visible');\n      } else {\n        onMouseEnter?.(e);\n      }\n    },\n    [controls, onMouseEnter]\n  );\n\n  const handleMouseLeave = useCallback(\n    async (e: React.MouseEvent<HTMLDivElement>) => {\n      if (!isControlledRef.current) {\n        await controls.start('default');\n      } else {\n        onMouseLeave?.(e);\n      }\n    },\n    [controls, onMouseLeave]\n  );\n\n  return (\n    <div\n      className={cn(className)}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      {...props}\n    >\n      <motion.svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width={size}\n        height={size}\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeWidth=\"2\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        initial=\"default\"\n        animate={controls}\n      >\n        <motion.circle\n          cx=\"7.5\"\n          cy=\"7.5\"\n          r=\".5\"\n          variants={dotVariants}\n          custom={0}\n          fill=\"currentColor\"\n        />\n        <motion.circle\n          cx=\"18.5\"\n          cy=\"5.5\"\n          r=\".5\"\n          variants={dotVariants}\n          custom={1}\n          fill=\"currentColor\"\n        />\n        <motion.circle\n          cx=\"11.5\"\n          cy=\"11.5\"\n          r=\".5\"\n          variants={dotVariants}\n          custom={2}\n          fill=\"currentColor\"\n        />\n        <motion.circle\n          cx=\"7.5\"\n          cy=\"16.5\"\n          r=\".5\"\n          variants={dotVariants}\n          custom={3}\n          fill=\"currentColor\"\n        />\n        <motion.circle\n          cx=\"17.5\"\n          cy=\"14.5\"\n          r=\".5\"\n          variants={dotVariants}\n          custom={4}\n          fill=\"currentColor\"\n        />\n        <path d=\"M3 3v16a2 2 0 0 0 2 2h16\" strokeWidth=\"2\" />\n      </motion.svg>\n    </div>\n  );\n});\n\nChartScatterIcon.displayName = 'ChartScatterIcon';\n\nexport { ChartScatterIcon };\n",
      "type": "registry:ui"
    }
  ]
}