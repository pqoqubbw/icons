{
  "name": "message-square",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "message-square.tsx",
      "content": "'use client';\r\n\r\nimport type { Variants } from 'motion/react';\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface MessageSquareIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface MessageSquareIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst iconVariants: Variants = {\r\n  normal: {\r\n    scale: 1,\r\n    rotate: 0,\r\n  },\r\n  animate: {\r\n    scale: 1.05,\r\n    rotate: [0, -7, 7, 0],\r\n    transition: {\r\n      rotate: {\r\n        duration: 0.5,\r\n        ease: 'easeInOut',\r\n      },\r\n      scale: {\r\n        type: 'spring',\r\n        stiffness: 400,\r\n        damping: 10,\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nconst MessageSquareIcon = forwardRef<\r\n  MessageSquareIconHandle,\r\n  MessageSquareIconProps\r\n>(({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n  const controls = useAnimation();\r\n  const isControlledRef = useRef(false);\r\n\r\n  useImperativeHandle(ref, () => {\r\n    isControlledRef.current = true;\r\n\r\n    return {\r\n      startAnimation: () => controls.start('animate'),\r\n      stopAnimation: () => controls.start('normal'),\r\n    };\r\n  });\r\n\r\n  const handleMouseEnter = useCallback(\r\n    (e: React.MouseEvent<HTMLDivElement>) => {\r\n      if (!isControlledRef.current) {\r\n        controls.start('animate');\r\n      } else {\r\n        onMouseEnter?.(e);\r\n      }\r\n    },\r\n    [controls, onMouseEnter]\r\n  );\r\n\r\n  const handleMouseLeave = useCallback(\r\n    (e: React.MouseEvent<HTMLDivElement>) => {\r\n      if (!isControlledRef.current) {\r\n        controls.start('normal');\r\n      } else {\r\n        onMouseLeave?.(e);\r\n      }\r\n    },\r\n    [controls, onMouseLeave]\r\n  );\r\n\r\n  return (\r\n    <div\r\n      className={cn(className)}\r\n      onMouseEnter={handleMouseEnter}\r\n      onMouseLeave={handleMouseLeave}\r\n      {...props}\r\n    >\r\n      <motion.svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        width={size}\r\n        height={size}\r\n        viewBox=\"0 0 24 24\"\r\n        fill=\"none\"\r\n        stroke=\"currentColor\"\r\n        strokeWidth=\"2\"\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n        variants={iconVariants}\r\n        animate={controls}\r\n      >\r\n        <path d=\"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z\" />\r\n      </motion.svg>\r\n    </div>\r\n  );\r\n});\r\n\r\nMessageSquareIcon.displayName = 'MessageSquareIcon';\r\n\r\nexport { MessageSquareIcon };\r\n",
      "type": "registry:ui"
    }
  ]
}