{
  "name": "pen-tool",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "pen-tool.tsx",
      "content": "'use client';\n\nimport type { Variants } from 'motion/react';\nimport { motion, useAnimation } from 'motion/react';\nimport type { HTMLAttributes } from 'react';\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface PenToolIconHandle {\n  startAnimation: () => void;\n  stopAnimation: () => void;\n}\n\ninterface PenToolIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number;\n}\n\nconst svgVariants: Variants = {\n  normal: { rotate: 0, translateX: 0, translateY: 0 },\n  animate: {\n    rotate: [0, 0, 8, -3, 8, 0],\n    translateY: [0, 2, 0, -1, 0],\n  },\n};\n\nconst pathVariants: Variants = {\n  normal: { pathLength: 1, opacity: 1, pathOffset: 0 },\n  animate: {\n    pathLength: [0, 0, 1],\n    opacity: [0, 1],\n    pathOffset: [0, 1, 0],\n  },\n};\n\nconst PenToolIcon = forwardRef<PenToolIconHandle, PenToolIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const controls = useAnimation();\n    const isControlledRef = useRef(false);\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true;\n\n      return {\n        startAnimation: () => controls.start('animate'),\n        stopAnimation: () => controls.start('normal'),\n      };\n    });\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('animate');\n        } else {\n          onMouseEnter?.(e);\n        }\n      },\n      [controls, onMouseEnter]\n    );\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          controls.start('normal');\n        } else {\n          onMouseLeave?.(e);\n        }\n      },\n      [controls, onMouseLeave]\n    );\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <motion.svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          variants={svgVariants}\n          transition={{\n            duration: 1,\n          }}\n          animate={controls}\n        >\n          <path d=\"M15.707 21.293a1 1 0 0 1-1.414 0l-1.586-1.586a1 1 0 0 1 0-1.414l5.586-5.586a1 1 0 0 1 1.414 0l1.586 1.586a1 1 0 0 1 0 1.414z\" />\n          <path d=\"m18 13-1.375-6.874a1 1 0 0 0-.746-.776L3.235 2.028a1 1 0 0 0-1.207 1.207L5.35 15.879a1 1 0 0 0 .776.746L13 18\" />\n          <motion.path\n            variants={pathVariants}\n            animate={controls}\n            transition={{\n              duration: 0.8,\n            }}\n            d=\"m2.3 2.3 7.286 7.286\"\n          />\n          <circle cx=\"11\" cy=\"11\" r=\"2\" />\n        </motion.svg>\n      </div>\n    );\n  }\n);\n\nPenToolIcon.displayName = 'PenToolIcon';\n\nexport { PenToolIcon };\n",
      "type": "registry:ui"
    }
  ]
}