{
  "name": "file-cog",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "file-cog.tsx",
      "content": "'use client';\n\nimport { cn } from '@/lib/utils';\nimport type { Variants } from 'motion/react';\nimport { motion, useAnimation } from 'motion/react';\nimport type { HTMLAttributes } from 'react';\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\n\nexport interface FileCogIconHandle {\n  startAnimation: () => void;\n  stopAnimation: () => void;\n}\n\nconst gVariants: Variants = {\n  normal: { rotate: 0 },\n  animate: { rotate: 180 },\n};\n\nconst FileCogIcon = forwardRef<\n  FileCogIconHandle,\n  HTMLAttributes<HTMLDivElement>\n>(({ onMouseEnter, onMouseLeave, className, ...props }, ref) => {\n  const controls = useAnimation();\n  const isControlledRef = useRef(false);\n\n  useImperativeHandle(ref, () => {\n    isControlledRef.current = true;\n    return {\n      startAnimation: () => controls.start('animate'),\n      stopAnimation: () => controls.start('normal'),\n    };\n  });\n\n  const handleMouseEnter = useCallback(\n    (e: React.MouseEvent<HTMLDivElement>) => {\n      if (!isControlledRef.current) {\n        controls.start('animate');\n      } else {\n        onMouseEnter?.(e);\n      }\n    },\n    [controls, onMouseEnter]\n  );\n\n  const handleMouseLeave = useCallback(\n    (e: React.MouseEvent<HTMLDivElement>) => {\n      if (!isControlledRef.current) {\n        controls.start('normal');\n      } else {\n        onMouseLeave?.(e);\n      }\n    },\n    [controls, onMouseLeave]\n  );\n\n  return (\n    <div\n      className={cn(className)}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      {...props}\n    >\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"28\"\n        height=\"28\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeWidth=\"2\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      >\n        <path d=\"M14 2v4a2 2 0 0 0 2 2h4\" />\n        <path d=\"M4.677 21.5a2 2 0 0 0 1.313.5H18a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v2.5\" />\n        <motion.g\n          transition={{ type: 'spring', stiffness: 50, damping: 10 }}\n          variants={gVariants}\n          animate={controls}\n        >\n          <path d=\"m3.2 12.9-.9-.4\" />\n          <path d=\"m3.2 15.1-.9.4\" />\n          <path d=\"m4.9 11.2-.4-.9\" />\n          <path d=\"m4.9 16.8-.4.9\" />\n          <path d=\"m7.5 10.3-.4.9\" />\n          <path d=\"m7.5 17.7-.4-.9\" />\n          <path d=\"m9.7 12.5-.9.4\" />\n          <path d=\"m9.7 15.5-.9-.4\" />\n          <circle cx=\"6\" cy=\"14\" r=\"3\" />\n        </motion.g>\n      </svg>\n    </div>\n  );\n});\n\nFileCogIcon.displayName = 'FileCogIcon';\n\nexport { FileCogIcon };\n",
      "type": "registry:ui"
    }
  ]
}