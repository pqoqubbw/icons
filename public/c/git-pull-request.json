{
  "name": "git-pull-request",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "git-pull-request.tsx",
      "content": "'use client';\n\nimport { motion, useAnimation } from 'motion/react';\nimport type { HTMLAttributes } from 'react';\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface GitPullRequestIconHandle {\n  startAnimation: () => void;\n  stopAnimation: () => void;\n}\n\ninterface GitPullRequestIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number;\n}\n\nconst DURATION = 0.3;\n\nconst calculateDelay = (i: number) => {\n  if (i === 0) return 0.1;\n\n  return i * DURATION + 0.1;\n};\n\nconst GitPullRequestIcon = forwardRef<\n  GitPullRequestIconHandle,\n  GitPullRequestIconProps\n>(({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n  const controls = useAnimation();\n  const isControlledRef = useRef(false);\n\n  useImperativeHandle(ref, () => {\n    isControlledRef.current = true;\n\n    return {\n      startAnimation: () => controls.start('animate'),\n      stopAnimation: () => controls.start('normal'),\n    };\n  });\n\n  const handleMouseEnter = useCallback(\n    (e: React.MouseEvent<HTMLDivElement>) => {\n      if (!isControlledRef.current) {\n        controls.start('animate');\n      } else {\n        onMouseEnter?.(e);\n      }\n    },\n    [controls, onMouseEnter]\n  );\n\n  const handleMouseLeave = useCallback(\n    (e: React.MouseEvent<HTMLDivElement>) => {\n      if (!isControlledRef.current) {\n        controls.start('normal');\n      } else {\n        onMouseLeave?.(e);\n      }\n    },\n    [controls, onMouseLeave]\n  );\n\n  return (\n    <div\n      className={cn(className)}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      {...props}\n    >\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width={size}\n        height={size}\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeWidth=\"2\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      >\n        <motion.circle\n          cx=\"18\"\n          cy=\"18\"\n          r=\"3\"\n          transition={{\n            duration: DURATION,\n            delay: calculateDelay(0),\n            opacity: { delay: calculateDelay(0) },\n          }}\n          variants={{\n            normal: { pathLength: 1, opacity: 1, transition: { delay: 0 } },\n            animate: {\n              pathLength: [0, 1],\n              opacity: [0, 1],\n            },\n          }}\n          animate={controls}\n        />\n        <motion.circle\n          cx=\"6\"\n          cy=\"6\"\n          r=\"3\"\n          transition={{\n            duration: DURATION,\n            delay: calculateDelay(2),\n            opacity: { delay: calculateDelay(2) },\n          }}\n          variants={{\n            normal: { pathLength: 1, opacity: 1, transition: { delay: 0 } },\n            animate: {\n              pathLength: [0, 1],\n              opacity: [0, 1],\n            },\n          }}\n          animate={controls}\n        />\n        <motion.path\n          d=\"M13 6h3a2 2 0 0 1 2 2v7\"\n          transition={{\n            duration: DURATION,\n            delay: calculateDelay(1),\n            opacity: { delay: calculateDelay(1) },\n          }}\n          variants={{\n            normal: {\n              pathLength: 1,\n              pathOffset: 0,\n              opacity: 1,\n              transition: { delay: 0 },\n            },\n            animate: {\n              pathLength: [0, 1],\n              opacity: [0, 1],\n              pathOffset: [1, 0],\n            },\n          }}\n          animate={controls}\n        />\n        <motion.line\n          x1=\"6\"\n          x2=\"6\"\n          y1=\"9\"\n          y2=\"21\"\n          transition={{\n            duration: DURATION,\n            delay: calculateDelay(3),\n            opacity: { delay: calculateDelay(3) },\n          }}\n          variants={{\n            normal: { opacity: 1, pathLength: 1, transition: { delay: 0 } },\n            animate: {\n              opacity: [0, 1],\n              pathLength: [0, 1],\n            },\n          }}\n          animate={controls}\n        />\n      </svg>\n    </div>\n  );\n});\n\nGitPullRequestIcon.displayName = 'GitPullRequestIcon';\n\nexport { GitPullRequestIcon };\n",
      "type": "registry:ui"
    }
  ]
}