{
  "name": "git-pull-request",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "git-pull-request.tsx",
      "content": "'use client';\r\n\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface GitPullRequestIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface GitPullRequestIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst DURATION = 0.3;\r\n\r\nconst calculateDelay = (i: number) => {\r\n  if (i === 0) return 0.1;\r\n\r\n  return i * DURATION + 0.1;\r\n};\r\n\r\nconst GitPullRequestIcon = forwardRef<\r\n  GitPullRequestIconHandle,\r\n  GitPullRequestIconProps\r\n>(({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n  const controls = useAnimation();\r\n  const isControlledRef = useRef(false);\r\n\r\n  useImperativeHandle(ref, () => {\r\n    isControlledRef.current = true;\r\n\r\n    return {\r\n      startAnimation: () => controls.start('animate'),\r\n      stopAnimation: () => controls.start('normal'),\r\n    };\r\n  });\r\n\r\n  const handleMouseEnter = useCallback(\r\n    (e: React.MouseEvent<HTMLDivElement>) => {\r\n      if (!isControlledRef.current) {\r\n        controls.start('animate');\r\n      } else {\r\n        onMouseEnter?.(e);\r\n      }\r\n    },\r\n    [controls, onMouseEnter]\r\n  );\r\n\r\n  const handleMouseLeave = useCallback(\r\n    (e: React.MouseEvent<HTMLDivElement>) => {\r\n      if (!isControlledRef.current) {\r\n        controls.start('normal');\r\n      } else {\r\n        onMouseLeave?.(e);\r\n      }\r\n    },\r\n    [controls, onMouseLeave]\r\n  );\r\n\r\n  return (\r\n    <div\r\n      className={cn(className)}\r\n      onMouseEnter={handleMouseEnter}\r\n      onMouseLeave={handleMouseLeave}\r\n      {...props}\r\n    >\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        width={size}\r\n        height={size}\r\n        viewBox=\"0 0 24 24\"\r\n        fill=\"none\"\r\n        stroke=\"currentColor\"\r\n        strokeWidth=\"2\"\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n      >\r\n        <motion.circle\r\n          cx=\"18\"\r\n          cy=\"18\"\r\n          r=\"3\"\r\n          transition={{\r\n            duration: DURATION,\r\n            delay: calculateDelay(0),\r\n            opacity: { delay: calculateDelay(0) },\r\n          }}\r\n          variants={{\r\n            normal: { pathLength: 1, opacity: 1, transition: { delay: 0 } },\r\n            animate: {\r\n              pathLength: [0, 1],\r\n              opacity: [0, 1],\r\n            },\r\n          }}\r\n          animate={controls}\r\n        />\r\n        <motion.circle\r\n          cx=\"6\"\r\n          cy=\"6\"\r\n          r=\"3\"\r\n          transition={{\r\n            duration: DURATION,\r\n            delay: calculateDelay(2),\r\n            opacity: { delay: calculateDelay(2) },\r\n          }}\r\n          variants={{\r\n            normal: { pathLength: 1, opacity: 1, transition: { delay: 0 } },\r\n            animate: {\r\n              pathLength: [0, 1],\r\n              opacity: [0, 1],\r\n            },\r\n          }}\r\n          animate={controls}\r\n        />\r\n        <motion.path\r\n          d=\"M13 6h3a2 2 0 0 1 2 2v7\"\r\n          transition={{\r\n            duration: DURATION,\r\n            delay: calculateDelay(1),\r\n            opacity: { delay: calculateDelay(1) },\r\n          }}\r\n          variants={{\r\n            normal: {\r\n              pathLength: 1,\r\n              pathOffset: 0,\r\n              opacity: 1,\r\n              transition: { delay: 0 },\r\n            },\r\n            animate: {\r\n              pathLength: [0, 1],\r\n              opacity: [0, 1],\r\n              pathOffset: [1, 0],\r\n            },\r\n          }}\r\n          animate={controls}\r\n        />\r\n        <motion.line\r\n          x1=\"6\"\r\n          x2=\"6\"\r\n          y1=\"9\"\r\n          y2=\"21\"\r\n          transition={{\r\n            duration: DURATION,\r\n            delay: calculateDelay(3),\r\n            opacity: { delay: calculateDelay(3) },\r\n          }}\r\n          variants={{\r\n            normal: { opacity: 1, pathLength: 1, transition: { delay: 0 } },\r\n            animate: {\r\n              opacity: [0, 1],\r\n              pathLength: [0, 1],\r\n            },\r\n          }}\r\n          animate={controls}\r\n        />\r\n      </svg>\r\n    </div>\r\n  );\r\n});\r\n\r\nGitPullRequestIcon.displayName = 'GitPullRequestIcon';\r\n\r\nexport { GitPullRequestIcon };\r\n",
      "type": "registry:ui"
    }
  ]
}