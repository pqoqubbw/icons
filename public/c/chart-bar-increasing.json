{
  "name": "chart-bar-increasing",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "chart-bar-increasing.tsx",
      "content": "'use client';\n\nimport { type Variants, motion, useAnimation } from 'motion/react';\nimport type { HTMLAttributes } from 'react';\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface ChartBarIncreasingIconHandle {\n  startAnimation: () => void;\n  stopAnimation: () => void;\n}\n\ninterface ChartBarIncreasingIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number;\n}\n\nconst lineVariants: Variants = {\n  visible: { pathLength: 1, opacity: 1 },\n  hidden: { pathLength: 0, opacity: 0 },\n};\n\nconst ChartBarIncreasingIcon = forwardRef<\n  ChartBarIncreasingIconHandle,\n  ChartBarIncreasingIconProps\n>(({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n  const controls = useAnimation();\n  const isControlledRef = useRef(false);\n\n  useImperativeHandle(ref, () => {\n    isControlledRef.current = true;\n\n    return {\n      startAnimation: async () => {\n        await controls.start((i) => ({\n          pathLength: 0,\n          opacity: 0,\n          transition: { delay: i * 0.1, duration: 0.3 },\n        }));\n        await controls.start((i) => ({\n          pathLength: 1,\n          opacity: 1,\n          transition: { delay: i * 0.1, duration: 0.3 },\n        }));\n      },\n      stopAnimation: () => controls.start('visible'),\n    };\n  });\n\n  const handleMouseEnter = useCallback(\n    async (e: React.MouseEvent<HTMLDivElement>) => {\n      if (!isControlledRef.current) {\n        await controls.start((i) => ({\n          pathLength: 0,\n          opacity: 0,\n          transition: { delay: i * 0.1, duration: 0.3 },\n        }));\n        await controls.start((i) => ({\n          pathLength: 1,\n          opacity: 1,\n          transition: { delay: i * 0.1, duration: 0.3 },\n        }));\n      } else {\n        onMouseEnter?.(e);\n      }\n    },\n    [controls, onMouseEnter]\n  );\n\n  const handleMouseLeave = useCallback(\n    (e: React.MouseEvent<HTMLDivElement>) => {\n      if (!isControlledRef.current) {\n        controls.start('visible');\n      } else {\n        onMouseLeave?.(e);\n      }\n    },\n    [controls, onMouseLeave]\n  );\n\n  return (\n    <div\n      className={cn(className)}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      {...props}\n    >\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width={size}\n        height={size}\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeWidth=\"2\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      >\n        <path d=\"M3 3v16a2 2 0 0 0 2 2h16\" />\n        <motion.path\n          variants={lineVariants}\n          initial=\"visible\"\n          animate={controls}\n          custom={1}\n          d=\"M7 11h8\"\n        />\n        <motion.path\n          variants={lineVariants}\n          initial=\"visible\"\n          animate={controls}\n          custom={2}\n          d=\"M7 16h12\"\n        />\n        <motion.path\n          variants={lineVariants}\n          initial=\"visible\"\n          animate={controls}\n          custom={0}\n          d=\"M7 6h3\"\n        />\n      </svg>\n    </div>\n  );\n});\n\nChartBarIncreasingIcon.displayName = 'ChartBarIncreasingIcon';\n\nexport { ChartBarIncreasingIcon };\n",
      "type": "registry:ui"
    }
  ]
}