{
  "name": "history",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "history.tsx",
      "content": "'use client';\r\n\r\nimport type { Transition, Variants } from 'motion/react';\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface HistoryIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface HistoryIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst arrowTransition: Transition = {\r\n  type: 'spring',\r\n  stiffness: 250,\r\n  damping: 25,\r\n};\r\n\r\nconst arrowVariants: Variants = {\r\n  normal: {\r\n    rotate: '0deg',\r\n  },\r\n  animate: {\r\n    rotate: '-50deg',\r\n  },\r\n};\r\n\r\nconst handTransition: Transition = {\r\n  duration: 0.6,\r\n  ease: [0.4, 0, 0.2, 1],\r\n};\r\n\r\nconst handVariants: Variants = {\r\n  normal: {\r\n    rotate: 0,\r\n    originX: '0%',\r\n    originY: '100%',\r\n  },\r\n  animate: {\r\n    rotate: -360,\r\n    originX: '0%',\r\n    originY: '100%',\r\n  },\r\n};\r\n\r\nconst minuteHandTransition: Transition = {\r\n  duration: 0.5,\r\n  ease: 'easeInOut',\r\n};\r\n\r\nconst minuteHandVariants: Variants = {\r\n  normal: {\r\n    rotate: 0,\r\n    originX: '0%',\r\n    originY: '0%',\r\n  },\r\n  animate: {\r\n    rotate: -45,\r\n    originX: '0%',\r\n    originY: '0%',\r\n  },\r\n};\r\n\r\nconst HistoryIcon = forwardRef<HistoryIconHandle, HistoryIconProps>(\r\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n    const controls = useAnimation();\r\n    const isControlledRef = useRef(false);\r\n\r\n    useImperativeHandle(ref, () => {\r\n      isControlledRef.current = true;\r\n      return {\r\n        startAnimation: () => controls.start('animate'),\r\n        stopAnimation: () => controls.start('normal'),\r\n      };\r\n    });\r\n\r\n    const handleMouseEnter = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('animate');\r\n        } else {\r\n          onMouseEnter?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseEnter]\r\n    );\r\n\r\n    const handleMouseLeave = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('normal');\r\n        } else {\r\n          onMouseLeave?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseLeave]\r\n    );\r\n\r\n    return (\r\n      <div\r\n        className={cn(className)}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        {...props}\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={size}\r\n          height={size}\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n        >\r\n          <motion.g\r\n            transition={arrowTransition}\r\n            variants={arrowVariants}\r\n            animate={controls}\r\n          >\r\n            <path d=\"M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8\" />\r\n            <path d=\"M3 3v5h5\" />\r\n          </motion.g>\r\n          <motion.line\r\n            x1=\"12\"\r\n            y1=\"12\"\r\n            x2=\"12\"\r\n            y2=\"7\"\r\n            variants={handVariants}\r\n            animate={controls}\r\n            initial=\"normal\"\r\n            transition={handTransition}\r\n          />\r\n          <motion.line\r\n            x1=\"12\"\r\n            y1=\"12\"\r\n            x2=\"16\"\r\n            y2=\"14\"\r\n            variants={minuteHandVariants}\r\n            animate={controls}\r\n            initial=\"normal\"\r\n            transition={minuteHandTransition}\r\n          />\r\n        </svg>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nHistoryIcon.displayName = 'HistoryIcon';\r\n\r\nexport { HistoryIcon };\r\n",
      "type": "registry:ui"
    }
  ]
}