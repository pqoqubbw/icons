{
  "name": "bookmark-plus",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "bookmark-plus.tsx",
      "content": "'use client';\n\nimport type { Variants } from 'motion/react';\nimport { motion, useAnimation } from 'motion/react';\nimport {\n  forwardRef,\n  useImperativeHandle,\n  useRef,\n  useCallback,\n  type HTMLAttributes,\n} from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface BookmarkPlusIconHandle {\n  startAnimation: () => void;\n  stopAnimation: () => void;\n}\n\ninterface BookmarkPlusIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number;\n}\n\nconst BOOKMARK_VARIANTS: Variants = {\n  normal: { scaleY: 1, scaleX: 1 },\n  animate: {\n    scaleY: [1, 1.3, 0.9, 1.05, 1],\n    scaleX: [1, 0.9, 1.1, 0.95, 1],\n    transition: {\n      duration: 0.6,\n      ease: 'easeOut',\n    },\n  },\n};\n\nconst PLUS_LINE_VARIANTS: Variants = {\n  normal: { strokeDashoffset: 0, opacity: 1 },\n  animate: (i: number) => ({\n    strokeDashoffset: [1, 0],\n    opacity: 1,\n    transition: {\n      duration: 0.3,\n      ease: 'easeOut',\n      delay: i * 0.1,\n    },\n  }),\n};\n\nconst BookmarkPlusIcon = forwardRef<\n  BookmarkPlusIconHandle,\n  BookmarkPlusIconProps\n>(({ className, size = 28, onMouseEnter, onMouseLeave, ...props }, ref) => {\n  const controls = useAnimation();\n  const isControlledRef = useRef(false);\n\n  useImperativeHandle(ref, () => {\n    isControlledRef.current = true;\n    return {\n      startAnimation: () => controls.start('animate'),\n      stopAnimation: () => controls.start('normal'),\n    };\n  });\n\n  const handleMouseEnter = useCallback(\n    (e: React.MouseEvent<HTMLDivElement>) => {\n      if (!isControlledRef.current) {\n        controls.start('animate');\n      } else {\n        onMouseEnter?.(e);\n      }\n    },\n    [controls, onMouseEnter]\n  );\n\n  const handleMouseLeave = useCallback(\n    (e: React.MouseEvent<HTMLDivElement>) => {\n      if (!isControlledRef.current) {\n        controls.start('normal');\n      } else {\n        onMouseLeave?.(e);\n      }\n    },\n    [controls, onMouseLeave]\n  );\n\n  return (\n    <div\n      className={cn(className)}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      {...props}\n    >\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width={size}\n        height={size}\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeWidth=\"2\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      >\n        <motion.path\n          d=\"m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z\"\n          animate={controls}\n          variants={BOOKMARK_VARIANTS}\n          style={{ originX: 0.5, originY: 0.5 }}\n        />\n\n        <motion.line\n          x1=\"12\"\n          x2=\"12\"\n          y1=\"7\"\n          y2=\"13\"\n          animate={controls}\n          variants={PLUS_LINE_VARIANTS}\n          custom={0}\n          initial=\"normal\"\n          strokeDasharray=\"1 1\"\n          pathLength=\"1\"\n        />\n        <motion.line\n          x1=\"15\"\n          x2=\"9\"\n          y1=\"10\"\n          y2=\"10\"\n          animate={controls}\n          variants={PLUS_LINE_VARIANTS}\n          custom={1}\n          initial=\"normal\"\n          strokeDasharray=\"1 1\"\n          pathLength=\"1\"\n        />\n      </svg>\n    </div>\n  );\n});\n\nBookmarkPlusIcon.displayName = 'BookmarkPlusIcon';\n\nexport { BookmarkPlusIcon };\n",
      "type": "registry:ui"
    }
  ]
}