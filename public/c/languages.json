{
  "name": "languages",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "languages.tsx",
      "content": "'use client';\n\nimport type { Variants } from 'motion/react';\nimport { motion, useAnimation } from 'motion/react';\nimport type { HTMLAttributes } from 'react';\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface LanguagesIconHandle {\n  startAnimation: () => void;\n  stopAnimation: () => void;\n}\n\ninterface LanguagesIconProps extends HTMLAttributes<HTMLDivElement> {\n  size?: number;\n}\n\nconst pathVariants: Variants = {\n  normal: { opacity: 1, pathLength: 1, pathOffset: 0 },\n  animate: (custom: number) => ({\n    opacity: [0, 1],\n    pathLength: [0, 1],\n    pathOffset: [1, 0],\n    transition: {\n      opacity: { duration: 0.01, delay: custom * 0.1 },\n      pathLength: {\n        type: 'spring',\n        duration: 0.5,\n        bounce: 0,\n        delay: custom * 0.1,\n      },\n    },\n  }),\n};\n\nconst svgVariants: Variants = {\n  normal: { opacity: 1 },\n  animate: {\n    opacity: 1,\n    transition: {\n      staggerChildren: 0.1,\n      delayChildren: 0.2,\n    },\n  },\n};\n\nconst LanguagesIcon = forwardRef<LanguagesIconHandle, LanguagesIconProps>(\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\n    const svgControls = useAnimation();\n    const pathControls = useAnimation();\n\n    const isControlledRef = useRef(false);\n\n    useImperativeHandle(ref, () => {\n      isControlledRef.current = true;\n\n      return {\n        startAnimation: () => {\n          svgControls.start('animate');\n          pathControls.start('animate');\n        },\n        stopAnimation: () => {\n          svgControls.start('normal');\n          pathControls.start('normal');\n        },\n      };\n    });\n\n    const handleMouseEnter = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          svgControls.start('animate');\n          pathControls.start('animate');\n        } else {\n          onMouseEnter?.(e);\n        }\n      },\n      [onMouseEnter, pathControls, svgControls]\n    );\n\n    const handleMouseLeave = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isControlledRef.current) {\n          svgControls.start('normal');\n          pathControls.start('normal');\n        } else {\n          onMouseLeave?.(e);\n        }\n      },\n      [svgControls, pathControls, onMouseLeave]\n    );\n\n    return (\n      <div\n        className={cn(className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        <motion.svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          variants={svgVariants}\n          animate={svgControls}\n        >\n          <motion.path\n            d=\"m5 8 6 6\"\n            variants={pathVariants}\n            custom={3}\n            animate={pathControls}\n          />\n          <motion.path\n            d=\"m4 14 6-6 3-3\"\n            variants={pathVariants}\n            custom={2}\n            animate={pathControls}\n          />\n          <motion.path\n            d=\"M2 5h12\"\n            variants={pathVariants}\n            custom={1}\n            animate={pathControls}\n          />\n          <motion.path\n            d=\"M7 2h1\"\n            variants={pathVariants}\n            custom={0}\n            animate={pathControls}\n          />\n          <motion.path\n            d=\"m22 22-5-10-5 10\"\n            variants={pathVariants}\n            custom={3}\n            animate={pathControls}\n          />\n          <motion.path\n            d=\"M14 18h6\"\n            variants={pathVariants}\n            custom={3}\n            animate={pathControls}\n          />\n        </motion.svg>\n      </div>\n    );\n  }\n);\n\nLanguagesIcon.displayName = 'LanguagesIcon';\n\nexport { LanguagesIcon };\n",
      "type": "registry:ui"
    }
  ]
}