{
  "name": "clap",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "clap.tsx",
      "content": "'use client';\r\n\r\nimport type { Variants } from 'motion/react';\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface ClapIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface ClapIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst variants: Variants = {\r\n  normal: {\r\n    rotate: 0,\r\n    originX: '4px',\r\n    originY: '20px',\r\n  },\r\n  animate: {\r\n    rotate: [-10, -10, 0],\r\n    transition: {\r\n      duration: 0.8,\r\n      times: [0, 0.5, 1],\r\n      ease: 'easeInOut',\r\n    },\r\n  },\r\n};\r\n\r\nconst clapVariants: Variants = {\r\n  normal: {\r\n    rotate: 0,\r\n    originX: '3px',\r\n    originY: '11px',\r\n  },\r\n  animate: {\r\n    rotate: [0, -10, 16, 0],\r\n    transition: {\r\n      duration: 0.4,\r\n      times: [0, 0.3, 0.6, 1],\r\n      ease: 'easeInOut',\r\n    },\r\n  },\r\n};\r\n\r\nconst ClapIcon = forwardRef<ClapIconHandle, ClapIconProps>(\r\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n    const controls = useAnimation();\r\n    const isControlledRef = useRef(false);\r\n\r\n    useImperativeHandle(ref, () => {\r\n      isControlledRef.current = true;\r\n\r\n      return {\r\n        startAnimation: () => controls.start('animate'),\r\n        stopAnimation: () => controls.start('normal'),\r\n      };\r\n    });\r\n\r\n    const handleMouseEnter = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('animate');\r\n        } else {\r\n          onMouseEnter?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseEnter]\r\n    );\r\n\r\n    const handleMouseLeave = useCallback(\r\n      (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if (!isControlledRef.current) {\r\n          controls.start('normal');\r\n        } else {\r\n          onMouseLeave?.(e);\r\n        }\r\n      },\r\n      [controls, onMouseLeave]\r\n    );\r\n    return (\r\n      <div\r\n        className={cn(className)}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        {...props}\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={size}\r\n          height={size}\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          style={{ overflow: 'visible' }}\r\n        >\r\n          <motion.g animate={controls} variants={variants}>\r\n            <motion.g animate={controls} variants={clapVariants}>\r\n              <path d=\"M20.2 6 3 11l-.9-2.4c-.3-1.1.3-2.2 1.3-2.5l13.5-4c1.1-.3 2.2.3 2.5 1.3Z\" />\r\n              <path d=\"m6.2 5.3 3.1 3.9\" />\r\n              <path d=\"m12.4 3.4 3.1 4\" />\r\n            </motion.g>\r\n            <path d=\"M3 11h18v8a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2Z\" />\r\n          </motion.g>\r\n        </svg>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nClapIcon.displayName = 'ClapIcon';\r\n\r\nexport { ClapIcon };\r\n",
      "type": "registry:ui"
    }
  ]
}