{
  "name": "debug",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "debug.tsx",
      "content": "'use client';\r\n\r\nimport type { Variants } from 'motion/react';\r\nimport { motion, useAnimation } from 'motion/react';\r\nimport type { HTMLAttributes } from 'react';\r\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface DebugIconHandle {\r\n  startAnimation: () => void;\r\n  stopAnimation: () => void;\r\n}\r\n\r\ninterface DebugIconProps extends HTMLAttributes<HTMLDivElement> {\r\n  size?: number;\r\n}\r\n\r\nconst pulseVariants: Variants = {\r\n  normal: { scale: 1, opacity: 1 },\r\n  pulse: {\r\n    scale: [1, 1.2, 1],\r\n    opacity: [1, 0.5, 1],\r\n    transition: {\r\n      duration: 1.2,\r\n      repeat: Infinity,\r\n      ease: 'easeInOut',\r\n    },\r\n  },\r\n};\r\n\r\nconst DebugIcon = forwardRef<DebugIconHandle, DebugIconProps>(\r\n  ({ onMouseEnter, onMouseLeave, className, size = 28, ...props }, ref) => {\r\n    const controls = useAnimation();\r\n    const isControlledRef = useRef(false);\r\n\r\n    useImperativeHandle(ref, () => {\r\n      isControlledRef.current = true;\r\n      return {\r\n        startAnimation: () => controls.start('pulse'),\r\n        stopAnimation: () => controls.start('normal'),\r\n      };\r\n    });\r\n\r\n    const handleMouseEnter = useCallback((e: any) => {\r\n      if (!isControlledRef.current) controls.start('pulse');\r\n      else onMouseEnter?.(e);\r\n    }, []);\r\n\r\n    const handleMouseLeave = useCallback((e: any) => {\r\n      if (!isControlledRef.current) controls.start('normal');\r\n      else onMouseLeave?.(e);\r\n    }, []);\r\n\r\n    return (\r\n      <div\r\n        className={cn(\r\n          'cursor-pointer select-none p-2 hover:bg-accent rounded-md transition-colors duration-200 flex items-center justify-center',\r\n          className\r\n        )}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        {...props}\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={size}\r\n          height={size}\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n        >\r\n          {/* Bug base (from Lucide's bug icon) */}\r\n          <path d=\"M8 2v2m8-2v2M9 10h6m-6 4h6\" />\r\n          <path d=\"M12 6v14a4 4 0 0 1-4-4V10a4 4 0 0 1 4-4z\" />\r\n          <path d=\"M12 6v14a4 4 0 0 0 4-4V10a4 4 0 0 0-4-4z\" />\r\n          {/* Legs */}\r\n          <path d=\"M3 13h2M3 17h2M19 13h2M19 17h2\" />\r\n          {/* Pulse dot as breakpoint */}\r\n          <motion.circle\r\n            cx=\"12\"\r\n            cy=\"4\"\r\n            r=\"1.5\"\r\n            fill=\"red\"\r\n            variants={pulseVariants}\r\n            animate={controls}\r\n            initial=\"normal\"\r\n          />\r\n        </svg>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nDebugIcon.displayName = 'DebugIcon';\r\nexport { DebugIcon };\r\n",
      "type": "registry:ui"
    }
  ]
}